(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{135:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var b=r.a.createContext({}),c=function(e){var t=r.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,b=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,O=p["".concat(o,".").concat(m)]||p[m]||d[m]||i;return n?r.a.createElement(O,l(l({ref:t},b),{},{components:n})):r.a.createElement(O,l({ref:t},b))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var b=2;b<i;b++)o[b]=n[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return c}));var a=n(3),r=n(7),i=(n(0),n(135)),o={id:"asset-transfer",title:"Asset Transfer"},l={unversionedId:"external/getting-started/interop/asset-transfer",id:"external/getting-started/interop/asset-transfer",isDocsHomePage:!1,title:"Asset Transfer",description:"\x3c!--",source:"@site/docs/external/getting-started/interop/asset-transfer.md",slug:"/external/getting-started/interop/asset-transfer",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-transfer",editUrl:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/edit/master/docs/external/getting-started/interop/asset-transfer.md",version:"current",sidebar:"Documentation",previous:{title:"Asset Exchange",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-exchange"},next:{title:"Hyperledger Fabric",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/enabling-weaver-network/fabric"}},s=[{value:"Transfer or recover a bond (non-fungible) asset",id:"transfer-or-recover-a-bond-non-fungible-asset",children:[]},{value:"Transfer or recover token (fungible) assets",id:"transfer-or-recover-token-fungible-assets",children:[]}],b={toc:s};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This document lists sample ways in which you can exercise the asset-transfer interoperation protocol on the test network ",Object(i.b)("a",{parentName:"p",href:"../test-network/overview"},"launched earlier"),"."),Object(i.b)("p",null,"Once the networks, relays, and drivers have been launched, and the ledgers bootstrapped, you can trigger the following interoperation flows corresponding to distinct asset-sharing combinations ",Object(i.b)("em",{parentName:"p"},"other combinations of DLTs will be supported soon"),"):"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("strong",{parentName:"li"},"Fabric with Fabric"),": One Fabric network transfers either a bond or some tokens owned by Alice to Bob in the other network")),Object(i.b)("p",null,"Assuming that the ",Object(i.b)("inlineCode",{parentName:"p"},"simpleassettransfer")," chaincode has been deployed in both networks, run the following steps by navigating to the ",Object(i.b)("inlineCode",{parentName:"p"},"samples/fabric/fabric-cli")," folder (",Object(i.b)("em",{parentName:"p"},"the Go CLI doesn't support asset transfer yet"),")."),Object(i.b)("h2",{id:"transfer-or-recover-a-bond-non-fungible-asset"},"Transfer or recover a bond (non-fungible) asset"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," owns bonds with ids ",Object(i.b)("inlineCode",{parentName:"li"},"a03")," and ",Object(i.b)("inlineCode",{parentName:"li"},"a04")," as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query mychannel simpleassettransfer ReadAsset \'["bond01","a03","true"]\' --local-network=network1\n./bin/fabric-cli chaincode query mychannel simpleassettransfer ReadAsset \'["bond01","a04","true"]\' --local-network=network1\n')),"You should see a JSON structure corresponding to the bond being logged on the console in each case."),Object(i.b)("li",{parentName:"ol"},"Get ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," to pledge bond ",Object(i.b)("inlineCode",{parentName:"li"},"a03")," to ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 hour timeout):",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=3600 --type=bond --ref=a03 --data-file=src/data/assetsForTransfer.json\n"))),Object(i.b)("li",{parentName:"ol"},"Get ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," to claim this bond asset as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/claimAsset.sh network2 network1 bond bond01 a03\n"))),Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," does not own this asset as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query mychannel simpleassettransfer ReadAsset \'["bond01","a03","true"]\' --local-network=network1\n')),"You should see an error message like ",Object(i.b)("inlineCode",{parentName:"li"},"Error: the asset a03 does not exist"),"."),Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," now owns this asset as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query mychannel simpleassettransfer ReadAsset \'["bond01","a03","true"]\' --local-network=network2\n'))),Object(i.b)("li",{parentName:"ol"},"Now get ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," to pledge bond ",Object(i.b)("inlineCode",{parentName:"li"},"a04")," to ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 minute timeout):",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=60 --type=bond --ref=a04 --data-file=src/data/assetsForTransfer.json\n")),"Wait for a minute as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"sleep 60\n"))),Object(i.b)("li",{parentName:"ol"},"Now get ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," to claim this bond asset as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/claimAsset.sh network2 network1 bond bond01 a04\n")),"This should fail as the pledge has already expired."),Object(i.b)("li",{parentName:"ol"},"Now get ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," to reclaim the asset as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/reclaimAsset.sh network1 network2 bond bond01 a04\n"))),Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," owns this asset as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query mychannel simpleassettransfer ReadAsset \'["bond01","a04","true"]\' --local-network=network1\n'))),Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," does not own this asset as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query mychannel simpleassettransfer ReadAsset \'["bond01","a04","true"]\' --local-network=network2\n')),"You should see an error message like ",Object(i.b)("inlineCode",{parentName:"li"},"Error: the asset a04 does not exist"),".")),Object(i.b)("h2",{id:"transfer-or-recover-token-fungible-assets"},"Transfer or recover token (fungible) assets"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," owns ",Object(i.b)("inlineCode",{parentName:"li"},"10000")," tokens as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," owns no tokens as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network2 bob\n")),"You should see an error message like ",Object(i.b)("inlineCode",{parentName:"li"},"Error: owner does not have a wallet"),"."),Object(i.b)("li",{parentName:"ol"},"Get ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," to pledge 50 tokens to ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 hour timeout):",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=3600 --type=token --units=50 --owner=alice --data-file=src/data/tokensForTransfer.json\n")),"You should see a message containing the unique ID of this pledge on the console as ",Object(i.b)("inlineCode",{parentName:"li"},"Asset pledged with ID <pledge-id>")," (",Object(i.b)("inlineCode",{parentName:"li"},"<pledge-id>")," is a hexadecimal string)."),Object(i.b)("li",{parentName:"ol"},"Get ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," to claim these tokens as follows (replace ",Object(i.b)("inlineCode",{parentName:"li"},"<pledge-id>")," with the above hexadecimal value):",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/claimAsset.sh network2 network1 token token1 <pledge-id> 50\n"))),Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," owns ",Object(i.b)("inlineCode",{parentName:"li"},"9950")," tokens (after losing ",Object(i.b)("inlineCode",{parentName:"li"},"50"),") as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," now owns ",Object(i.b)("inlineCode",{parentName:"li"},"50")," tokens as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network2 bob\n"))),Object(i.b)("li",{parentName:"ol"},"Now get ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," to pledge 100 tokens to ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 minute timeout):",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=60 --type=token --units=100 --owner=alice --data-file=src/data/tokensForTransfer.json\n")),"Wait for a minute as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"sleep 60\n")),"You should see a message containing the unique ID of this pledge on the console as ",Object(i.b)("inlineCode",{parentName:"li"},"Asset pledged with ID <pledge-id>")," (",Object(i.b)("inlineCode",{parentName:"li"},"<pledge-id>")," is a hexadecimal string)."),Object(i.b)("li",{parentName:"ol"},"Now get ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," to claim these tokens as follows (replace ",Object(i.b)("inlineCode",{parentName:"li"},"<pledge-id>")," with the above hexadecimal value):",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/claimAsset.sh network2 network1 token token1 <pledge-id> 100\n")),"This should fail as the pledge has already expired."),Object(i.b)("li",{parentName:"ol"},"Now get ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," to reclaim these tokens as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/reclaimAsset.sh network1 network2 token token1 <pledge-id>\n"))),Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network1")," still owns ",Object(i.b)("inlineCode",{parentName:"li"},"9950")," tokens (after losing ",Object(i.b)("inlineCode",{parentName:"li"},"50"),") as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),Object(i.b)("li",{parentName:"ol"},"Verify that ",Object(i.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," still owns only ",Object(i.b)("inlineCode",{parentName:"li"},"50")," tokens as follows:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network2 bob\n")))))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkweaver_dlt_interoperability=self.webpackChunkweaver_dlt_interoperability||[]).push([[5117],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>m});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),c=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(s.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),y=a,m=d["".concat(s,".").concat(y)]||d[y]||u[y]||i;return t?n.createElement(m,o(o({ref:r},p),{},{components:t})):n.createElement(m,o({ref:r},p))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=y;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},810:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=t(8168),a=(t(6540),t(5680));const i={id:"relay",title:"Relay"},o=void 0,l={unversionedId:"external/architecture-and-design/relay",id:"external/architecture-and-design/relay",title:"Relay",description:"\x3c!--",source:"@site/docs/external/architecture-and-design/relay.md",sourceDirName:"external/architecture-and-design",slug:"/external/architecture-and-design/relay",permalink:"/weaver-dlt-interoperability/docs/external/architecture-and-design/relay",draft:!1,editUrl:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/edit/main/docs/external/architecture-and-design/relay.md",tags:[],version:"current",frontMatter:{id:"relay",title:"Relay"},sidebar:"Documentation",previous:{title:"Overview",permalink:"/weaver-dlt-interoperability/docs/external/architecture-and-design/overview"},next:{title:"Drivers",permalink:"/weaver-dlt-interoperability/docs/external/architecture-and-design/drivers"}},s={},c=[],p={toc:c},d="wrapper";function u(e){let{components:r,...i}=e;return(0,a.yg)(d,(0,n.A)({},p,i,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("p",null,(0,a.yg)("img",{src:t(3228).A,width:"1418",height:"510"})),(0,a.yg)("p",null,"As mentioned in the overview, relays facilitate communication of protocols between networks. To do this, they are composed of three main pieces:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Relay service")," - A gRPC server that listens for and handles incoming requests from other relays. For example, a remote network requesting state."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"App service")," - A gRPC server that listens for and handles requests from applications that are requesting an asset from a remote network."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Driver")," - The driver is responsible for all communication between the relay and its network. The driver is described in more detail in ",(0,a.yg)("a",{parentName:"li",href:"/weaver-dlt-interoperability/docs/external/architecture-and-design/drivers"},"drivers"),".")),(0,a.yg)("p",null,"The diagram below shows an example communication between two networks, A and B, where network A is requesting state from network B."),(0,a.yg)("p",null,(0,a.yg)("img",{src:t(7073).A,width:"1643",height:"487"})),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"An application sends a request to their networks relay over gRPC"),(0,a.yg)("li",{parentName:"ol"},"The local relay inspects the query within the request and uses the relevant information to forward the request to the correct remote relay"),(0,a.yg)("li",{parentName:"ol"},"The remote relay's driver interprets the query and invokes the smart contract for the query"),(0,a.yg)("li",{parentName:"ol"},"Once network B has returned a response to its relay, the relay forwards the response back to relay A"),(0,a.yg)("li",{parentName:"ol"},"The application gets the response from the relay, this can either be via a push or pull mechanism"),(0,a.yg)("li",{parentName:"ol"},"The application invokes a domain specific smart contract to process the response from network B")))}u.isMDXComponent=!0},3228:(e,r,t)=>{t.d(r,{A:()=>n});const n=t.p+"assets/images/relay_architecture-26238a46409ead54fb26da49e2df22c7.png"},7073:(e,r,t)=>{t.d(r,{A:()=>n});const n=t.p+"assets/images/relay_flow-a6320d0cf553ee5b95a94cab63f44883.png"}}]);
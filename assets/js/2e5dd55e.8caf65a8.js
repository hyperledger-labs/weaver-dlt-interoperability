"use strict";(self.webpackChunkweaver_dlt_interoperability=self.webpackChunkweaver_dlt_interoperability||[]).push([[4010],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>N});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},k="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),k=p(n),m=i,N=k["".concat(s,".").concat(m)]||k[m]||c[m]||r;return n?a.createElement(N,l(l({ref:t},d),{},{components:n})):a.createElement(N,l({ref:t},d))}));function N(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[k]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8854:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>k,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={id:"asset-transfer",title:"Asset Transfer",pagination_prev:"external/getting-started/interop/overview",pagination_next:"external/getting-started/enabling-weaver-network/overview"},l=void 0,o={unversionedId:"external/getting-started/interop/asset-transfer",id:"external/getting-started/interop/asset-transfer",title:"Asset Transfer",description:"\x3c!--",source:"@site/docs/external/getting-started/interop/asset-transfer.md",sourceDirName:"external/getting-started/interop",slug:"/external/getting-started/interop/asset-transfer",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-transfer",draft:!1,editUrl:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/edit/master/docs/external/getting-started/interop/asset-transfer.md",tags:[],version:"current",frontMatter:{id:"asset-transfer",title:"Asset Transfer",pagination_prev:"external/getting-started/interop/overview",pagination_next:"external/getting-started/enabling-weaver-network/overview"},sidebar:"Documentation",previous:{title:"Testing Interoperation Modes",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/overview"},next:{title:"Enabling Weaver in Existing DLT Applications",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/enabling-weaver-network/overview"}},s={},p=[{value:"1. Fabric with Fabric",id:"1-fabric-with-fabric",level:2},{value:"Transfer or recover a bond (non-fungible) asset",id:"transfer-or-recover-a-bond-non-fungible-asset",level:3},{value:"Transfer or recover token (fungible) assets",id:"transfer-or-recover-token-fungible-assets",level:3},{value:"2. Corda with Corda",id:"2-corda-with-corda",level:2},{value:"Transfer or recover token (fungible) assets",id:"transfer-or-recover-token-fungible-assets-1",level:3},{value:"Transfer or recover bond (non-fungible) assets",id:"transfer-or-recover-bond-non-fungible-assets",level:3},{value:"3. Fabric with Corda",id:"3-fabric-with-corda",level:2},{value:"Transfer or recover token (fungible) assets",id:"transfer-or-recover-token-fungible-assets-2",level:3},{value:"4. Corda with Fabric",id:"4-corda-with-fabric",level:2},{value:"Transfer or recover token (fungible) assets",id:"transfer-or-recover-token-fungible-assets-3",level:3}],d={toc:p};function k(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This document lists sample ways in which you can exercise the asset-transfer interoperation protocol on the test network ",(0,i.kt)("a",{parentName:"p",href:"/weaver-dlt-interoperability/docs/external/getting-started/test-network/overview"},"launched earlier"),"."),(0,i.kt)("p",null,"Once the networks, relays, and drivers have been launched, and the ledgers bootstrapped, you can trigger the following interoperation flows corresponding to distinct asset-sharing combinations ",(0,i.kt)("em",{parentName:"p"},"other combinations of DLTs will be supported soon"),"):"),(0,i.kt)("h2",{id:"1-fabric-with-fabric"},"1. Fabric with Fabric"),(0,i.kt)("p",null,"One Fabric network transfers either a bond or some tokens owned by Alice to Bob in the other network"),(0,i.kt)("p",null,"Assuming that the ",(0,i.kt)("inlineCode",{parentName:"p"},"simpleassettransfer")," chaincode has been deployed in both networks, run the following steps by navigating to the ",(0,i.kt)("inlineCode",{parentName:"p"},"samples/fabric/fabric-cli")," folder (",(0,i.kt)("em",{parentName:"p"},"the Go CLI doesn't support asset transfer yet"),")."),(0,i.kt)("h3",{id:"transfer-or-recover-a-bond-non-fungible-asset"},"Transfer or recover a bond (non-fungible) asset"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," owns bonds with ids ",(0,i.kt)("inlineCode",{parentName:"li"},"a03")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"a04")," as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query --user=alice mychannel simpleassettransfer ReadAsset \'["bond01","a03"]\' --local-network=network1\n./bin/fabric-cli chaincode query --user=alice mychannel simpleassettransfer ReadAsset \'["bond01","a04"]\' --local-network=network1\n')),"You should see a JSON structure corresponding to the bond being logged on the console in each case."),(0,i.kt)("li",{parentName:"ol"},"Get ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," to pledge bond ",(0,i.kt)("inlineCode",{parentName:"li"},"a03")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 hour timeout):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=3600 --type=bond --ref=a03 --data-file=src/data/assetsForTransfer.json\n")),"You should see a message containing the unique ID of this pledge on the console as ",(0,i.kt)("inlineCode",{parentName:"li"},"Asset pledged with ID <pledge-id>")," (",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," is a hexadecimal string)."),(0,i.kt)("li",{parentName:"ol"},"Get ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," to claim this bond asset as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer claim --source-network=network1 --dest-network=network2 --user=bob --owner=alice --type='bond.fabric' --pledge-id=<pledge-id> --param=bond01:a03\n"))),(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," does not own this asset as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query --user=alice mychannel simpleassettransfer ReadAsset \'["bond01","a03"]\' --local-network=network1\n')),"You should see an error message like ",(0,i.kt)("inlineCode",{parentName:"li"},"Error: the asset a03 does not exist"),"."),(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," now owns this asset as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query --user=bob mychannel simpleassettransfer ReadAsset \'["bond01","a03"]\' --local-network=network2\n'))),(0,i.kt)("li",{parentName:"ol"},"Now get ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," to pledge bond ",(0,i.kt)("inlineCode",{parentName:"li"},"a04")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 minute timeout):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=60 --type=bond --ref=a04 --data-file=src/data/assetsForTransfer.json\n")),"Wait for a minute as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sleep 60\n")),"You should see a message containing the unique ID of this pledge on the console as ",(0,i.kt)("inlineCode",{parentName:"li"},"Asset pledged with ID <pledge-id>")," (",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," is a hexadecimal string)."),(0,i.kt)("li",{parentName:"ol"},"Now get ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," to claim this bond asset as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer claim --source-network=network1 --dest-network=network2 --user=bob --owner=alice --type='bond.fabric' --pledge-id=<pledge-id> --param=bond01:a04\n")),"This should fail as the pledge has already expired."),(0,i.kt)("li",{parentName:"ol"},"Now get ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," to reclaim the asset as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer reclaim --source-network=network1 --user=alice --type='bond.fabric' --pledge-id=<pledge-id> --param=bond01:a04\n"))),(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," owns this asset as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query --user=alice mychannel simpleassettransfer ReadAsset \'["bond01","a04"]\' --local-network=network1\n'))),(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," does not own this asset as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query --user=bob mychannel simpleassettransfer ReadAsset \'["bond01","a04"]\' --local-network=network2\n')),"You should see an error message like ",(0,i.kt)("inlineCode",{parentName:"li"},"Error: the asset a04 does not exist"),".")),(0,i.kt)("h3",{id:"transfer-or-recover-token-fungible-assets"},"Transfer or recover token (fungible) assets"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," owns ",(0,i.kt)("inlineCode",{parentName:"li"},"10000")," tokens as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," owns no tokens as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network2 bob\n")),"You should see an error message like ",(0,i.kt)("inlineCode",{parentName:"li"},"Error: owner does not have a wallet"),"."),(0,i.kt)("li",{parentName:"ol"},"Get ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," to pledge 50 tokens to ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 hour timeout):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=3600 --type=token --units=50 --owner=alice --data-file=src/data/tokensForTransfer.json\n")),"You should see a message containing the unique ID of this pledge on the console as ",(0,i.kt)("inlineCode",{parentName:"li"},"Asset pledged with ID <pledge-id>")," (",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," is a hexadecimal string)."),(0,i.kt)("li",{parentName:"ol"},"Get ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," to claim these tokens as follows (replace ",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," with the above hexadecimal value):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer claim --source-network=network1 --dest-network=network2 --user=bob --owner=alice --type='token.fabric' --pledge-id=<pledge-id> --param=token1:50\n"))),(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," owns ",(0,i.kt)("inlineCode",{parentName:"li"},"9950")," tokens (after losing ",(0,i.kt)("inlineCode",{parentName:"li"},"50"),") as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," now owns ",(0,i.kt)("inlineCode",{parentName:"li"},"50")," tokens as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network2 bob\n"))),(0,i.kt)("li",{parentName:"ol"},"Now get ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," to pledge 100 tokens to ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 minute timeout):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=60 --type=token --units=100 --owner=alice --data-file=src/data/tokensForTransfer.json\n")),"Wait for a minute as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sleep 60\n")),"You should see a message containing the unique ID of this pledge on the console as ",(0,i.kt)("inlineCode",{parentName:"li"},"Asset pledged with ID <pledge-id>")," (",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," is a hexadecimal string)."),(0,i.kt)("li",{parentName:"ol"},"Now get ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," to claim these tokens as follows (replace ",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," with the above hexadecimal value):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer claim --source-network=network1 --dest-network=network2 --user=bob --owner=alice --type='token.fabric' --pledge-id=<pledge-id> --param=token1:100\n")),"This should fail as the pledge has already expired."),(0,i.kt)("li",{parentName:"ol"},"Now get ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," to reclaim these tokens as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer reclaim --source-network=network1 --user=alice --type='token.fabric' --pledge-id=<pledge-id> --param=token1:100\n"))),(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," still owns ",(0,i.kt)("inlineCode",{parentName:"li"},"9950")," tokens (after losing ",(0,i.kt)("inlineCode",{parentName:"li"},"50"),") as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),(0,i.kt)("li",{parentName:"ol"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network2")," still owns only ",(0,i.kt)("inlineCode",{parentName:"li"},"50")," tokens as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network2 bob\n")))),(0,i.kt)("h2",{id:"2-corda-with-corda"},"2. Corda with Corda"),(0,i.kt)("p",null,"One Corda network transfers either a bond or some tokens owned by the party ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," (",(0,i.kt)("inlineCode",{parentName:"p"},"CORDA_PORT=10006"),") to the party ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," (",(0,i.kt)("inlineCode",{parentName:"p"},"CORDA_PORT=30006"),") in the other network."),(0,i.kt)("h3",{id:"transfer-or-recover-token-fungible-assets-1"},"Transfer or recover token (fungible) assets"),(0,i.kt)("p",null,"Assume that the CorDapp ",(0,i.kt)("inlineCode",{parentName:"p"},"cordaSimpleApplication")," has been deployed in both networks."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Navigate to ",(0,i.kt)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder."),(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"5")," tokens of type ",(0,i.kt)("inlineCode",{parentName:"li"},"t1")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME='Corda_Network' CORDA_PORT=10006 ./clients/build/install/clients/bin/clients issue-asset-state 5 t1\n")),"(check token balance for ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," by running the command ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-asset-states-by-type t1"),")"),(0,i.kt)("li",{parentName:"ul"},"Let ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," pledge these tokens in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," to be transferred to ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," (pledge burns the tokens in the source/exporting network):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME='Corda_Network' CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer pledge-asset --fungible --timeout=\"3600\" --import-network-id='Corda_Network2' --recipient='O=PartyA, L=London, C=GB' --param='t1:5'\n")),"Note the ",(0,i.kt)("inlineCode",{parentName:"li"},"pledge-id")," displayed after successful execution of the command, which will be used in next steps. Let's denote it ",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," which is a hexadecimal string (pledge details can be cross checked using the commands ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer is-asset-pledged -pid <pledge-id>")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006  ./clients/build/install/clients/bin/clients transfer get-pledge-state -pid <pledge-id>"),")."),(0,i.kt)("li",{parentName:"ul"},"Check the token asset balance for ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," by running the below command, and the output should not include the asset ",(0,i.kt)("inlineCode",{parentName:"li"},"t1:5")," issued earlier.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-asset-states-by-type t1\n"))),(0,i.kt)("li",{parentName:"ul"},"Let ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," claim in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," the tokens which are pledged in the Corda network ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," by replacing ",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," with the above hexadecimal value (claim issues the tokens in the destination/importing network):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME='Corda_Network2' CORDA_PORT=30006 ./clients/build/install/clients/bin/clients transfer claim-remote-asset --pledge-id='<pledge-id>' --locker='O=PartyA, L=London, C=GB' --transfer-category='token.corda' --export-network-id='Corda_Network' --param='t1:5' --import-relay-address='localhost:9082'\n")),"(the ",(0,i.kt)("inlineCode",{parentName:"li"},"linear-id"),", which is displayed after successful execution of the above command, can be used to check the newly issued tokens for ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," by running ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30006 ./clients/build/install/clients/bin/clients get-state-using-linear-id <linear-id>"),"; or simply check the token balance for ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," by running the command ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30006 ./clients/build/install/clients/bin/clients get-asset-states-by-type t1")," which should output ",(0,i.kt)("inlineCode",{parentName:"li"},"5")," tokens of type ",(0,i.kt)("inlineCode",{parentName:"li"},"t1"),")")),(0,i.kt)("p",null,"The above steps complete a successful asset transfer from the Corda network ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network")," to the Corda network ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network2"),". In addition to the above commands, following is an extra option."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Let ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," try re-claim the token ",(0,i.kt)("inlineCode",{parentName:"li"},"t1:5")," asset, which will succeed only if the asset was not claimed by ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," and the pledge has expired:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer reclaim-pledged-asset --pledge-id=<pledge-id> --export-relay-address='localhost:9081' --transfer-category='token.corda' --import-network-id='Corda_Network2' --param='t1:5'\n")))),(0,i.kt)("h3",{id:"transfer-or-recover-bond-non-fungible-assets"},"Transfer or recover bond (non-fungible) assets"),(0,i.kt)("p",null,"Assume that the CorDapp ",(0,i.kt)("inlineCode",{parentName:"p"},"cordaSimpleApplication")," has been deployed in both networks."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Navigate to ",(0,i.kt)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder."),(0,i.kt)("li",{parentName:"ul"},"Add a bond asset with id ",(0,i.kt)("inlineCode",{parentName:"li"},"a10")," and type ",(0,i.kt)("inlineCode",{parentName:"li"},"bond01")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients bond issue-asset 'a10' 'bond01'\n")),"(check token balance for ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," by running the command ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients bond get-assets-by-type 'bond01'"),")"),(0,i.kt)("li",{parentName:"ul"},"Let ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," pledge these tokens in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," to be transferred to ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," of ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," (pledge burns the tokens in the source/exporting network):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer pledge-asset --timeout=\"3600\" --import-network-id='Corda_Network2' --recipient='O=PartyA, L=London, C=GB' --param='bond01:a10'\n")),"Note the ",(0,i.kt)("inlineCode",{parentName:"li"},"pledge-id")," displayed after successful execution of the command, which will be used in next steps. Let's denote it ",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," which is a hexadecimal string (pledge details can be cross checked using the commands ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer is-asset-pledged -pid <pledge-id>")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006  ./clients/build/install/clients/bin/clients transfer get-pledge-state -pid <pledge-id>"),")."),(0,i.kt)("li",{parentName:"ul"},"Check the bond asset balance for ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," by running the below command, and the output should not include the asset ",(0,i.kt)("inlineCode",{parentName:"li"},"bond01:a10")," issued earlier.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients bond get-assets-by-type 'bond01'`\n"))),(0,i.kt)("li",{parentName:"ul"},"Let ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," claim the bond asset which is pledged in the Corda network ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," by replacing ",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," with the above hexadecimal value (claim issues the bond asset in the destination/importing network):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients transfer claim-remote-asset --pledge-id='<pledge-id>' --locker='O=PartyA, L=London, C=GB' --transfer-category='bond.corda' --export-network-id='Corda_Network' --param='bond01:a10' --import-relay-address='localhost:9082'\n")),"(the ",(0,i.kt)("inlineCode",{parentName:"li"},"linear-id"),", which is displayed after successful execution of the above command, can be used to check the newly issued bond asset for ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," by running ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30006 ./clients/build/install/clients/bin/clients bond get-asset-by-linear-id <linear-id>"),"; or simply check the bond asset balance for ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," by running the command ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30006 ./clients/build/install/clients/bin/clients bond get-assets-by-type 'bond01'")," which should output asset with id ",(0,i.kt)("inlineCode",{parentName:"li"},"a10")," and type ",(0,i.kt)("inlineCode",{parentName:"li"},"bond01"),")")),(0,i.kt)("p",null,"The above steps complete a successful asset transfer from the Corda network ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network")," to the Corda network ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network2"),". In addition to the above commands, following is an extra option."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Let ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," try re-claim the bond asset ",(0,i.kt)("inlineCode",{parentName:"li"},"bond01:a10"),", which will succeed only if the asset was not claimed by ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," and the pledge has expired:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer reclaim-pledged-asset --pledge-id=<pledge-id> --export-relay-address='localhost:9081' --transfer-category='bond.corda' --import-network-id='Corda_Network2' --param='bond01:a10'\n")))),(0,i.kt)("h2",{id:"3-fabric-with-corda"},"3. Fabric with Corda"),(0,i.kt)("p",null,"A Fabric network transfers some tokens owned by ",(0,i.kt)("inlineCode",{parentName:"p"},"Alice")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," (",(0,i.kt)("inlineCode",{parentName:"p"},"CORDA_PORT=10006"),") in a Corda network."),(0,i.kt)("h3",{id:"transfer-or-recover-token-fungible-assets-2"},"Transfer or recover token (fungible) assets"),(0,i.kt)("p",null,"Assuming that the ",(0,i.kt)("inlineCode",{parentName:"p"},"simpleassettransfer")," chaincode has been deployed in Fabric network ",(0,i.kt)("inlineCode",{parentName:"p"},"network1"),", run the following steps related to Fabric by navigating to the ",(0,i.kt)("inlineCode",{parentName:"p"},"samples/fabric/fabric-cli")," folder (",(0,i.kt)("em",{parentName:"p"},"the Go CLI doesn't support asset transfer yet"),")."),(0,i.kt)("p",null,"Similarly, assuming that the CorDapp ",(0,i.kt)("inlineCode",{parentName:"p"},"cordaSimpleApplication")," has been deployed in the Corda network ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network"),", run the following steps related to Corda by navigating to the ",(0,i.kt)("inlineCode",{parentName:"p"},"samples/corda/corda-simple-application")," folder."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"network1")," owns ",(0,i.kt)("inlineCode",{parentName:"p"},"10000")," tokens as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Get ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"network1")," to pledge 50 tokens to ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network")," as follows (with a 1 hour timeout):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer pledge --source-network='network1' --dest-network='Corda_Network' --recipient='O=PartyA, L=London, C=GB' --expiry-secs=3600 --type='token' --units=50 --owner=alice --data-file=src/data/tokensForTransfer.json\n")),(0,i.kt)("p",{parentName:"li"}," You should see a message containing the unique ID of this pledge on the console as ",(0,i.kt)("inlineCode",{parentName:"p"},"Asset pledged with ID <pledge-id>")," (",(0,i.kt)("inlineCode",{parentName:"p"},"<pledge-id>")," is a hexadecimal string).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"network1")," owns ",(0,i.kt)("inlineCode",{parentName:"p"},"9950")," tokens (after losing ",(0,i.kt)("inlineCode",{parentName:"p"},"50"),") as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Let ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," claim in ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network")," the tokens which are pledged in the Fabric network ",(0,i.kt)("inlineCode",{parentName:"p"},"network1")," by replacing ",(0,i.kt)("inlineCode",{parentName:"p"},"<pledge-id>")," with the above hexadecimal value (claim issues the tokens in the destination/importing network):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer claim-remote-asset --pledge-id='<pledge-id>' --locker='alice' --transfer-category='token.fabric' --export-network-id='network1' --param='token1:50' --import-relay-address='localhost:9081'\n")),(0,i.kt)("p",{parentName:"li"},"(the ",(0,i.kt)("inlineCode",{parentName:"p"},"linear-id"),", which is displayed after successful execution of the above command, can be used to check the newly issued tokens for ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network")," by running ",(0,i.kt)("inlineCode",{parentName:"p"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-state-using-linear-id <linear-id>"),"; or simply check the token balance for ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," by running the command ",(0,i.kt)("inlineCode",{parentName:"p"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-asset-states-by-type token1")," which should output ",(0,i.kt)("inlineCode",{parentName:"p"},"50")," tokens of type ",(0,i.kt)("inlineCode",{parentName:"p"},"token1"),")"))),(0,i.kt)("p",null,"The above steps complete a successful asset transfer from the Fabric network ",(0,i.kt)("inlineCode",{parentName:"p"},"network1")," to the Corda network ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network"),". Below demostrates re-claim of the tokens pledged in the Fabric network after the pledge expiry."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Now get ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"network1")," to pledge 100 tokens to ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network")," as follows (with a 1 minute timeout):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer pledge --source-network='network1' --dest-network='Corda_Network' --recipient='O=PartyA, L=London, C=GB' --expiry-secs=60 --type=token --units=100 --owner=alice --data-file=src/data/tokensForTransfer.json\n")),(0,i.kt)("p",{parentName:"li"}," You should see a message containing the unique ID of this pledge on the console as ",(0,i.kt)("inlineCode",{parentName:"p"},"Asset pledged with ID <pledge-id>")," (",(0,i.kt)("inlineCode",{parentName:"p"},"<pledge-id>")," is a hexadecimal string)."),(0,i.kt)("p",{parentName:"li"}," Wait for a minute as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"sleep 60\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Let ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network")," claim the tokens which are pledged in the Fabric network ",(0,i.kt)("inlineCode",{parentName:"p"},"network1")," by replacing ",(0,i.kt)("inlineCode",{parentName:"p"},"<pledge-id>")," with the above hexadecimal value (claim issues the tokens in the destination/importing network):"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer claim-remote-asset --pledge-id='<pledge-id>' --locker='alice' --transfer-category='token.fabric' --export-network-id='network1' --param='token1:100' --import-relay-address='localhost:9080'\n")),(0,i.kt)("p",{parentName:"li"}," This should fail as the pledge has already expired."),(0,i.kt)("p",{parentName:"li"}," (check the token balance for ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," by running the command ",(0,i.kt)("inlineCode",{parentName:"p"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-asset-states-by-type token1")," which should still show ",(0,i.kt)("inlineCode",{parentName:"p"},"50")," tokens of type ",(0,i.kt)("inlineCode",{parentName:"p"},"token1")," but not ",(0,i.kt)("inlineCode",{parentName:"p"},"150"),")")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Now get ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"network1")," to reclaim these tokens as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer reclaim --source-network='network1' --user='alice' --type='token.corda' --pledge-id=<pledge-id> --param=token1:100\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"p"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"network1")," still owns ",(0,i.kt)("inlineCode",{parentName:"p"},"9950")," tokens (after losing ",(0,i.kt)("inlineCode",{parentName:"p"},"50"),") as follows:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n")))),(0,i.kt)("h2",{id:"4-corda-with-fabric"},"4. Corda with Fabric"),(0,i.kt)("p",null,"A Corda network transfers some tokens owned by ",(0,i.kt)("inlineCode",{parentName:"p"},"PartyA")," (",(0,i.kt)("inlineCode",{parentName:"p"},"CORDA_PORT=10006"),") to ",(0,i.kt)("inlineCode",{parentName:"p"},"Alice")," in a Fabric network."),(0,i.kt)("h3",{id:"transfer-or-recover-token-fungible-assets-3"},"Transfer or recover token (fungible) assets"),(0,i.kt)("p",null,"Assuming that the CorDapp ",(0,i.kt)("inlineCode",{parentName:"p"},"cordaSimpleApplication")," has been deployed in the Corda network ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network"),", run the following steps related to Corda by navigating to the ",(0,i.kt)("inlineCode",{parentName:"p"},"samples/corda/corda-simple-application")," folder."),(0,i.kt)("p",null,"Similarly, assume that the ",(0,i.kt)("inlineCode",{parentName:"p"},"simpleassettransfer")," chaincode has been deployed in Fabric network ",(0,i.kt)("inlineCode",{parentName:"p"},"network1"),", run the following steps related to Fabric by navigating to the ",(0,i.kt)("inlineCode",{parentName:"p"},"samples/fabric/fabric-cli")," folder (",(0,i.kt)("em",{parentName:"p"},"the Go CLI doesn't support asset transfer yet"),")."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add ",(0,i.kt)("inlineCode",{parentName:"li"},"5")," tokens of type ",(0,i.kt)("inlineCode",{parentName:"li"},"token1")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network"),":",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients issue-asset-state 5 token1\n")),"(check token balance for ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," by running the command ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-asset-states-by-type token1"),")"),(0,i.kt)("li",{parentName:"ul"},"Let ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," pledge (with a 1 hour timeout) these tokens in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," to be transferred to ",(0,i.kt)("inlineCode",{parentName:"li"},"Alice")," of Fabric network ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," (pledge burns the tokens in the source/exporting network):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer pledge-asset --fungible --timeout=\"3600\" --import-network-id='network1' --recipient='alice' --param='token1:5'\n")),"Note the ",(0,i.kt)("inlineCode",{parentName:"li"},"pledge-id")," displayed after successful execution of the command, which will be used in next steps. Let's denote it ",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," which is a hexadecimal string (pledge details can be cross checked using the commands ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer is-asset-pledged -pid <pledge-id>")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006  ./clients/build/install/clients/bin/clients transfer get-pledge-state -pid <pledge-id>"),")."),(0,i.kt)("li",{parentName:"ul"},"Check the token asset balance for ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," by running the below command, and the output should not include the asset ",(0,i.kt)("inlineCode",{parentName:"li"},"token1:5")," issued earlier.",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-asset-states-by-type token1`\n"))),(0,i.kt)("li",{parentName:"ul"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network1")," owns ",(0,i.kt)("inlineCode",{parentName:"li"},"10000")," tokens as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),(0,i.kt)("li",{parentName:"ul"},"Get ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network")," to claim these tokens as follows (replace ",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," with the above hexadecimal value):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer claim --source-network='Corda_Network' --dest-network=network1 --user='alice' --owner='O=PartyA, L=London, C=GB' --type='token.corda' --pledge-id=<pledge-id> --param=token1:5\n"))),(0,i.kt)("li",{parentName:"ul"},"Verify that ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"network")," now owns ",(0,i.kt)("inlineCode",{parentName:"li"},"1050")," tokens as follows:",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n")))),(0,i.kt)("p",null,"The above steps complete a successful asset transfer from the Corda network ",(0,i.kt)("inlineCode",{parentName:"p"},"Corda_Network")," to the Fabric network ",(0,i.kt)("inlineCode",{parentName:"p"},"network1"),". In addition to the above commands, following is an extra option."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Let ",(0,i.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"Corda_Network")," try re-claim the token ",(0,i.kt)("inlineCode",{parentName:"li"},"token1:5")," asset, which will succeed only if the asset was not claimed by ",(0,i.kt)("inlineCode",{parentName:"li"},"alice")," in Fabric network and the pledge has expired (replace ",(0,i.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," with the above hexadecimal value):",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer reclaim-pledged-asset --pledge-id=<pledge-id> --export-relay-address='localhost:9081' --transfer-category='token.fabric' --import-network-id='network1' --param='token1:5'\n")))))}k.isMDXComponent=!0}}]);
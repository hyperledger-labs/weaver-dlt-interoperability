"use strict";(self.webpackChunkweaver_dlt_interoperability=self.webpackChunkweaver_dlt_interoperability||[]).push([[5651],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return n?r.createElement(m,s(s({ref:t},u),{},{components:n})):r.createElement(m,s({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9402:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],i={},l=void 0,c={unversionedId:"internal/development/cordapp-interop/cordapp-interop-flows",id:"internal/development/cordapp-interop/cordapp-interop-flows",isDocsHomePage:!1,title:"cordapp-interop-flows",description:"\x3c!--",source:"@site/docs/internal/development/cordapp-interop/cordapp-interop-flows.md",sourceDirName:"internal/development/cordapp-interop",slug:"/internal/development/cordapp-interop/cordapp-interop-flows",permalink:"/weaver-dlt-interoperability/docs/internal/development/cordapp-interop/cordapp-interop-flows",editUrl:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/edit/master/docs/internal/development/cordapp-interop/cordapp-interop-flows.md",tags:[],version:"current",frontMatter:{}},u=[{value:"AccessControlFlows",id:"accesscontrolflows",children:[],level:3},{value:"AccessControlQueryFlows",id:"accesscontrolqueryflows",children:[],level:3},{value:"FNIMFlows",id:"fnimflows",children:[],level:3},{value:"FNIMQueryFlows",id:"fnimqueryflows",children:[],level:3},{value:"HandleRequestsFromForeignNetworkFlows",id:"handlerequestsfromforeignnetworkflows",children:[],level:3},{value:"WriteStateFromExternalNetworkFlows",id:"writestatefromexternalnetworkflows",children:[],level:3}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("p",null,"id: cordapp-interop-flows\ntitle: Flows"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"accesscontrolflows"},"AccessControlFlows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class AccessControlIssueRequestInitiator(\n        externalNetworkCertificates: List<String>,\n        externalNetworkId: String,\n        stateLinearId: UniqueIdentifier,\n        participants: List<Party> {\n    // creates an access control state on the ledger for a particular document\n}\n\nclass AccessControlIssueRequestApprover(\n    id: UniqueIdentifier){\n    // allows for a party to approve an access control issuance request\n}\n")),(0,a.kt)("h3",{id:"accesscontrolqueryflows"},"AccessControlQueryFlows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class QueryAccessControlIssueRequestStates() List<AccessControlIssueRequestState> {\n    // returns access control requests\n}\n\nclass QueryAccessControlIssueRequestStateByLinearId(linearId: UniqueIdentifier) AccessControlIssueRequestState {\n    // returns access control request by Id\n}\n\nclass QueryAccessControlStates() List<AccessControlState> {\n    // returns list of access control states\n}\n\nclass QueryAccessControlStateByLinearId(linearId: UniqueIdentifier) AccessControlState {\n    // returns access control state by Id\n}\n")),(0,a.kt)("h3",{id:"fnimflows"},"FNIMFlows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class FNIMInitiator(\n    networkId: String,\n    topology: List<FNNode>,\n    participants: List<Party>) {\n    // creates FNIM record for an external network\n}\n\nclass FNIMExitInitiator(\n    id: String ) {\n    // marks FNIM state as consumed\n}\n")),(0,a.kt)("h3",{id:"fnimqueryflows"},"FNIMQueryFlows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class QueryForeignNetworkInformationManagementStates : List<ForeignNetworkInformationManagementState> {\n    // returns list of FNIM states\n}\n\nclass QueryForeignNetworkInformationManagementStatesById(\n    linearId: UniqueIdentifier) ForeignNetworkInformationManagementState {\n    // returns FNIM state\n}\n\nclass QueryForeignNetworkInformationManagementStateByNetworkId(\n    networkId: String) ForeignNetworkInformationManagementState {\n    // returns FNIM state for specified network\n}\n")),(0,a.kt)("h3",{id:"handlerequestsfromforeignnetworkflows"},"HandleRequestsFromForeignNetworkFlows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class StateQueryInitiator(\n    externalNetworkId: String,\n    organizationName: String,\n    stateLinearId: UniqueIdentifier,\n    requesterCertString: String,\n    requesterSignature: String,\n    txId: String?\n) List<StateQueryResponse> {\n    // returns requested state\n}\n\nclass GetLinearIdsFromTxId(\n    txId: String\n) List<UniqueIdentifier> {\n    // returns list ids for states that match the query criterion\n}\n")),(0,a.kt)("h3",{id:"writestatefromexternalnetworkflows"},"WriteStateFromExternalNetworkFlows"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"class CreateExternalRequestStateObject(\n        request: ExternalStateRequest\n) RelayRequestObject {\n    // returns request object to query relay about a foreign network state\n}\n\nclass WriteExternalStateInitiator(\n    nodeResponses: List<NodeResponse>,\n    externalNetworkId: String,\n    participants: List<Party>\n) UniqueIdentifier {\n    // writes external state to ledger and returns unique identifier to be used to query from MarcoPolo\n}\n")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkweaver_dlt_interoperability=self.webpackChunkweaver_dlt_interoperability||[]).push([[320],{5680:(e,a,t)=>{t.d(a,{xA:()=>g,yg:()=>m});var r=t(6540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=r.createContext({}),p=function(e){var a=r.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},g=function(e){var a=p(e.components);return r.createElement(s.Provider,{value:a},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=p(t),d=n,m=c["".concat(s,".").concat(d)]||c[d]||y[d]||l;return t?r.createElement(m,i(i({ref:a},g),{},{components:t})):r.createElement(m,i({ref:a},g))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o[c]="string"==typeof e?e:n,i[1]=o;for(var p=2;p<l;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3948:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>y,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=t(8168),n=(t(6540),t(5680));const l={id:"data-sharing",title:"Data Sharing",pagination_prev:"external/getting-started/interop/overview",pagination_next:"external/getting-started/enabling-weaver-network/overview"},i=void 0,o={unversionedId:"external/getting-started/interop/data-sharing",id:"external/getting-started/interop/data-sharing",title:"Data Sharing",description:"\x3c!--",source:"@site/docs/external/getting-started/interop/data-sharing.md",sourceDirName:"external/getting-started/interop",slug:"/external/getting-started/interop/data-sharing",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/data-sharing",draft:!1,editUrl:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/edit/main/docs/external/getting-started/interop/data-sharing.md",tags:[],version:"current",frontMatter:{id:"data-sharing",title:"Data Sharing",pagination_prev:"external/getting-started/interop/overview",pagination_next:"external/getting-started/enabling-weaver-network/overview"},sidebar:"Documentation",previous:{title:"Testing Interoperation Modes",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/overview"},next:{title:"Enabling Weaver in Existing DLT Applications",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/enabling-weaver-network/overview"}},s={},p=[{value:"Corda to Corda",id:"corda-to-corda",level:2},{value:"Corda to Fabric",id:"corda-to-fabric",level:2},{value:"Fabric to Corda",id:"fabric-to-corda",level:2},{value:"Fabric to Fabric",id:"fabric-to-fabric",level:2}],g={toc:p},c="wrapper";function y(e){let{components:a,...t}=e;return(0,n.yg)(c,(0,r.A)({},g,t,{components:a,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"This document lists sample ways in which you can exercise the data-sharing interoperation protocol on the test network ",(0,n.yg)("a",{parentName:"p",href:"/weaver-dlt-interoperability/docs/external/getting-started/test-network/overview"},"launched earlier"),"."),(0,n.yg)("p",null,"Once the networks, relays, and drivers have been launched, and the ledgers bootstrapped, you can trigger four different interoperation flows corresponding to distinct data-sharing combinations as follows:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Corda to Corda"),": Either Corda network requests state and proof from another Corda network"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Corda to Fabric"),": The Corda network requests state and proof from either Fabric network"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Fabric to Corda"),": Either Fabric network requests state and proof from the Corda network"),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("strong",{parentName:"li"},"Fabric to Fabric"),": One Fabric network requests state and proof from another Fabric network")),(0,n.yg)("p",null,"We assume that one of the following chaincodes have been deployed in either Fabric network you are testing with:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"simplestate")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"simplestatewithacl"))),(0,n.yg)("h2",{id:"corda-to-corda"},"Corda to Corda"),(0,n.yg)("p",null,"To test the scenario where ",(0,n.yg)("inlineCode",{parentName:"p"},"Corda_Network")," requests the value of the state (key) ",(0,n.yg)("inlineCode",{parentName:"p"},"H")," from ",(0,n.yg)("inlineCode",{parentName:"p"},"Corda_Network2")," and writes the value to a key ",(0,n.yg)("inlineCode",{parentName:"p"},"H")," in its local state, do the following:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(",(0,n.yg)("em",{parentName:"li"},"Make sure the following are running"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"Corda_Network"),", relay, and driver; ",(0,n.yg)("inlineCode",{parentName:"li"},"Corda_Network2"),", relay, and driver)"),(0,n.yg)("li",{parentName:"ul"},"Navigate to the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder in your clone of the Weaver repository."),(0,n.yg)("li",{parentName:"ul"},"Run the following:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9082/Corda_Network2/localhost:30006#com.cordaSimpleApplication.flow.GetStateByKey:H\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/fabric_ca_cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9082/Corda_Network2/localhost:30006#com.cordaSimpleApplication.flow.GetStateByKey:H\n"))))),(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-corda2:9082/Corda_Network2/corda_network2_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/docker/ca-cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-corda2:9082/Corda_Network2/corda_network2_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H\n"))))))),(0,n.yg)("li",{parentName:"ul"},"Query the value of the requested state using key ",(0,n.yg)("inlineCode",{parentName:"li"},"H")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"Corda_Network")," by running the following command:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-state H\n")))),(0,n.yg)("p",null,"To test the scenario where ",(0,n.yg)("inlineCode",{parentName:"p"},"Corda_Network2")," requests the value of the state (key) ",(0,n.yg)("inlineCode",{parentName:"p"},"C")," from ",(0,n.yg)("inlineCode",{parentName:"p"},"Corda_Network")," and writes the value to a key ",(0,n.yg)("inlineCode",{parentName:"p"},"C")," in its local state, do the following:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(",(0,n.yg)("em",{parentName:"li"},"Make sure the following are running"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"Corda_Network"),", relay, and driver; ",(0,n.yg)("inlineCode",{parentName:"li"},"Corda_Network2"),", relay, and driver)"),(0,n.yg)("li",{parentName:"ul"},"Navigate to the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder in your clone of the Weaver repository."),(0,n.yg)("li",{parentName:"ul"},"Run the following:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients request-state localhost:9082 localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:C\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/fabric_ca_cert.pem NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients request-state localhost:9082 localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:C\n"))))),(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients request-state localhost:9082 relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:C\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/docker/ca-cert.pem NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients request-state localhost:9082 relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:C\n"))))))),(0,n.yg)("li",{parentName:"ul"},"Query the value of the requested state, using the key ",(0,n.yg)("inlineCode",{parentName:"li"},"C")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"Corda_Network")," by running the following command:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients get-state C\n")))),(0,n.yg)("h2",{id:"corda-to-fabric"},"Corda to Fabric"),(0,n.yg)("p",null,"To test the scenario where ",(0,n.yg)("inlineCode",{parentName:"p"},"Corda_Network")," requests the value of the state (key) ",(0,n.yg)("inlineCode",{parentName:"p"},"a")," from ",(0,n.yg)("inlineCode",{parentName:"p"},"network1")," and writes the value to a key ",(0,n.yg)("inlineCode",{parentName:"p"},"a")," in its local state, do the following:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(",(0,n.yg)("em",{parentName:"li"},"Make sure the following are running"),": Corda network, relay, and driver; Fabric ",(0,n.yg)("inlineCode",{parentName:"li"},"network1"),", relay, and driver)"),(0,n.yg)("li",{parentName:"ul"},"Navigate to the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder in your clone of the Weaver repository."),(0,n.yg)("li",{parentName:"ul"},"Run the following:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9080/network1/mychannel:simplestate:Read:a\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/fabric_ca_cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9080/network1/mychannel:simplestate:Read:a\n"))))),(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-network1:9080/network1/mychannel:simplestate:Read:a\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/docker/ca-cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-network1:9080/network1/mychannel:simplestate:Read:a\n"))))))),(0,n.yg)("li",{parentName:"ul"},"Query the value of the requested state (key) ",(0,n.yg)("inlineCode",{parentName:"li"},"a")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"Corda_Network")," using the following:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-state a\n")))),(0,n.yg)("p",null,"To test the scenario where ",(0,n.yg)("inlineCode",{parentName:"p"},"Corda_Network")," requests the value of the state (key) ",(0,n.yg)("inlineCode",{parentName:"p"},"Arcturus")," from ",(0,n.yg)("inlineCode",{parentName:"p"},"network2")," and writes the value to a key ",(0,n.yg)("inlineCode",{parentName:"p"},"Arcturus")," in its local state, do the following:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(",(0,n.yg)("em",{parentName:"li"},"Make sure the following are running"),": Corda network, relay, and driver; Fabric ",(0,n.yg)("inlineCode",{parentName:"li"},"network2"),", relay, and driver)"),(0,n.yg)("li",{parentName:"ul"},"Navigate to the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder in your clone of the Weaver repository."),(0,n.yg)("li",{parentName:"ul"},"Run the following:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9083/network2/mychannel:simplestate:Read:Arcturus\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/fabric_ca_cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9083/network2/mychannel:simplestate:Read:Arcturus\n"))))),(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/docker/ca-cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus\n"))))))),(0,n.yg)("li",{parentName:"ul"},"Query the value of the requested state (key) ",(0,n.yg)("inlineCode",{parentName:"li"},"Arcturus")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"Corda_Network")," using the following:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-state Arcturus\n")))),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:"left"},"Notes"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"You can test the above data transfer scenario with ",(0,n.yg)("inlineCode",{parentName:"td"},"Corda_Network2")," instead of ",(0,n.yg)("inlineCode",{parentName:"td"},"Corda_Network")," by changing the following in the ",(0,n.yg)("inlineCode",{parentName:"td"},"request-state")," or ",(0,n.yg)("inlineCode",{parentName:"td"},"get-state")," command:",(0,n.yg)("ul",null,(0,n.yg)("li",null,"Network name environment variable:",(0,n.yg)("ul",null,(0,n.yg)("li",null,(0,n.yg)("inlineCode",{parentName:"td"},"NETWORK_NAME=Corda_Network")," to ",(0,n.yg)("inlineCode",{parentName:"td"},"NETWORK_NAME=Corda_Network2")))),(0,n.yg)("li",null,"Corda node's RPC endpoint port environment variable:",(0,n.yg)("ul",null,(0,n.yg)("li",null,(0,n.yg)("inlineCode",{parentName:"td"},"CORDA_PORT=10006")," to ",(0,n.yg)("inlineCode",{parentName:"td"},"CORDA_PORT=30006")))),(0,n.yg)("li",null,"Local relay address",(0,n.yg)("ul",null,(0,n.yg)("li",null,(0,n.yg)("inlineCode",{parentName:"td"},"localhost:9081")," to ",(0,n.yg)("inlineCode",{parentName:"td"},"localhost:9082")," (host deployment of relays and drivers)"),(0,n.yg)("li",null,(0,n.yg)("inlineCode",{parentName:"td"},"relay-corda2:9081")," to ",(0,n.yg)("inlineCode",{parentName:"td"},"relay-corda2:9082")," (Docker container deployment of relays and drivers)")))))))),(0,n.yg)("h2",{id:"fabric-to-corda"},"Fabric to Corda"),(0,n.yg)("p",null,"To test the scenario where ",(0,n.yg)("inlineCode",{parentName:"p"},"network1")," requests the value of the state (key) ",(0,n.yg)("inlineCode",{parentName:"p"},"H")," from ",(0,n.yg)("inlineCode",{parentName:"p"},"Corda_Network")," and writes the value to a key ",(0,n.yg)("inlineCode",{parentName:"p"},"H")," in its local state, do the following:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(",(0,n.yg)("em",{parentName:"li"},"Make sure the following are running"),": Corda network, relay, and driver; Fabric ",(0,n.yg)("inlineCode",{parentName:"li"},"network1"),", relay, and driver)"),(0,n.yg)("li",{parentName:"ul"},"Navigate to the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," (for the Node.js version) or the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/fabric/go-cli")," (for the Golang version) folder in your clone of the Weaver repository."),(0,n.yg)("li",{parentName:"ul"},"(Make sure you have configured ",(0,n.yg)("inlineCode",{parentName:"li"},"fabric-cli")," as per earlier instructions)"),(0,n.yg)("li",{parentName:"ul"},"Edit ",(0,n.yg)("inlineCode",{parentName:"li"},"chaincode.json"),": in the ",(0,n.yg)("inlineCode",{parentName:"li"},"simplestate:Create:args")," attribute, replace the argument ",(0,n.yg)("inlineCode",{parentName:"li"},'"a"')," with ",(0,n.yg)("inlineCode",{parentName:"li"},'"H"')," (this specifies the key to which the data from the remote view is to be written into); i.e.,:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-json"},'"args": ["a", ""]\n')),"with",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-json"},'"args": ["H", ""]\n'))),(0,n.yg)("li",{parentName:"ul"},"Run the following:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --sign=true --requesting-org=Org1MSP localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --sign=true --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/fabric_ca_cert.pem localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))))),(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --sign=true --requesting-org=Org1MSP relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --sign=true --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/docker/ca-cert.pem relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))))))),(0,n.yg)("li",{parentName:"ul"},"Query the value of the requested state (key) ",(0,n.yg)("inlineCode",{parentName:"li"},"H")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"network1")," using the following:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli chaincode query mychannel simplestate read '[\"H\"]' --local-network=network1\n")))),(0,n.yg)("p",null,"To test the scenario where ",(0,n.yg)("inlineCode",{parentName:"p"},"network2")," requests the value of the state (key) ",(0,n.yg)("inlineCode",{parentName:"p"},"H")," from ",(0,n.yg)("inlineCode",{parentName:"p"},"Corda_Network")," and writes the value to a key ",(0,n.yg)("inlineCode",{parentName:"p"},"H")," in its local state, do the following:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(",(0,n.yg)("em",{parentName:"li"},"Make sure the following are running"),": Corda network, relay, and driver; Fabric ",(0,n.yg)("inlineCode",{parentName:"li"},"network2"),", relay, and driver)"),(0,n.yg)("li",{parentName:"ul"},"Navigate to the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," (for the Node.js version) or the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/fabric/go-cli")," (for the Golang version) folder in your clone of the Weaver repository."),(0,n.yg)("li",{parentName:"ul"},"(Make sure you have configured ",(0,n.yg)("inlineCode",{parentName:"li"},"fabric-cli")," as per earlier instructions)"),(0,n.yg)("li",{parentName:"ul"},"Edit ",(0,n.yg)("inlineCode",{parentName:"li"},"chaincode.json"),": in the ",(0,n.yg)("inlineCode",{parentName:"li"},"simplestate:Create:args")," attribute, replace the argument ",(0,n.yg)("inlineCode",{parentName:"li"},'"a"')," with ",(0,n.yg)("inlineCode",{parentName:"li"},'"H"')," (this specifies the key to which the data from the remote view is to be written into); i.e.,:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-json"},'"args": ["a", ""]\n')),"with",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-json"},'"args": ["H", ""]\n'))),(0,n.yg)("li",{parentName:"ul"},"Run the following:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --sign=true --requesting-org=Org1MSP localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --sign=true --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/fabric_ca_cert.pem localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))))),(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --sign=true --requesting-org=Org1MSP relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --sign=true --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/docker/ca-cert.pem relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))))))),(0,n.yg)("li",{parentName:"ul"},"Query the value of the requested state (key) ",(0,n.yg)("inlineCode",{parentName:"li"},"H")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"network2")," using the following:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli chaincode query mychannel simplestate read '[\"H\"]' --local-network=network2\n")))),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:"left"},"Notes"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"You can test the above data transfer scenario with ",(0,n.yg)("inlineCode",{parentName:"td"},"Corda_Network2")," instead of ",(0,n.yg)("inlineCode",{parentName:"td"},"Corda_Network")," by changing the following in the view address (last parameter in the ",(0,n.yg)("inlineCode",{parentName:"td"},"interop")," command):",(0,n.yg)("ul",null,(0,n.yg)("li",null,"Local relay address (prefix):",(0,n.yg)("ul",null,(0,n.yg)("li",null,(0,n.yg)("inlineCode",{parentName:"td"},"localhost:9081")," to ",(0,n.yg)("inlineCode",{parentName:"td"},"localhost:9082")," (host deployment of relays and drivers)"),(0,n.yg)("li",null,(0,n.yg)("inlineCode",{parentName:"td"},"relay-corda2:9081")," to ",(0,n.yg)("inlineCode",{parentName:"td"},"relay-corda2:9082")," (Docker container deployment of relays and drivers)"))),(0,n.yg)("li",null,"Network name:",(0,n.yg)("ul",null,(0,n.yg)("li",null,(0,n.yg)("inlineCode",{parentName:"td"},"Corda_Network")," to ",(0,n.yg)("inlineCode",{parentName:"td"},"Corda_Network2")))),(0,n.yg)("li",null,"Corda node's RPC endpoint:",(0,n.yg)("ul",null,(0,n.yg)("li",null,(0,n.yg)("inlineCode",{parentName:"td"},"localhost:10006")," to ",(0,n.yg)("inlineCode",{parentName:"td"},"localhost:30006")," (host deployment of relays and drivers)"),(0,n.yg)("li",null,(0,n.yg)("inlineCode",{parentName:"td"},"corda_partya_1:10003")," to ",(0,n.yg)("inlineCode",{parentName:"td"},"corda_network2_partya_1:10003")," (Docker container deployment of relays and drivers)")))))))),(0,n.yg)("h2",{id:"fabric-to-fabric"},"Fabric to Fabric"),(0,n.yg)("p",null,"To test the scenario where ",(0,n.yg)("inlineCode",{parentName:"p"},"network1")," requests the value of the state (key) ",(0,n.yg)("inlineCode",{parentName:"p"},"Arcturus")," from ",(0,n.yg)("inlineCode",{parentName:"p"},"network2")," and writes the value to a key ",(0,n.yg)("inlineCode",{parentName:"p"},"Arcturus")," in its local state, do the following:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(",(0,n.yg)("em",{parentName:"li"},"Make sure the following are running"),": Fabric ",(0,n.yg)("inlineCode",{parentName:"li"},"network1"),", relay, and driver; Fabric ",(0,n.yg)("inlineCode",{parentName:"li"},"network2"),", relay, and driver)"),(0,n.yg)("li",{parentName:"ul"},"Navigate to the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," (for the Node.js version) or the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/fabric/go-cli")," (for the Golang version) folder in your clone of the Weaver repository."),(0,n.yg)("li",{parentName:"ul"},"(Make sure you have configured ",(0,n.yg)("inlineCode",{parentName:"li"},"fabric-cli")," as per earlier instructions)"),(0,n.yg)("li",{parentName:"ul"},"Edit ",(0,n.yg)("inlineCode",{parentName:"li"},"chaincode.json"),": in the ",(0,n.yg)("inlineCode",{parentName:"li"},"simplestate:Create:args")," attribute, replace the argument ",(0,n.yg)("inlineCode",{parentName:"li"},'"a"')," with ",(0,n.yg)("inlineCode",{parentName:"li"},'"Arcturus"')," (this specifies the key to which the data from the remote view is to be written into); i.e.,:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-json"},'"args": ["a", ""]\n')),"with",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-json"},'"args": ["Arcturus", ""]\n'))),(0,n.yg)("li",{parentName:"ul"},"Run the following:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --requesting-org=Org1MSP localhost:9083/network2/mychannel:simplestate:Read:Arcturus\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/fabric_ca_cert.pem localhost:9083/network2/mychannel:simplestate:Read:Arcturus\n"))))),(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --requesting-org=Org1MSP relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/docker/ca-cert.pem relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus\n")))))))),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:"left"},"Notes"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"If you wish to enable end-to-end confidentiality for this data sharing session, add the ",(0,n.yg)("inlineCode",{parentName:"td"},"--e2e-confidentiality=true")," switch to any of the above commands. For example: ",(0,n.yg)("inlineCode",{parentName:"td"},"./bin/fabric-cli interop --local-network=network1 --requesting-org=Org1MSP --e2e-confidentiality=true localhost:9083/network2/mychannel:simplestate:Read:Arcturus"))))),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Query the value of the requested state (key) ",(0,n.yg)("inlineCode",{parentName:"li"},"Arcturus")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"network1")," using the following:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli chaincode query mychannel simplestate read '[\"Arcturus\"]' --local-network=network1\n")))),(0,n.yg)("p",null,"To test the scenario where ",(0,n.yg)("inlineCode",{parentName:"p"},"network2")," requests the value of the state (key) ",(0,n.yg)("inlineCode",{parentName:"p"},"a")," from ",(0,n.yg)("inlineCode",{parentName:"p"},"network1")," and writes the value to a key ",(0,n.yg)("inlineCode",{parentName:"p"},"a")," in its local state, do the following:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"(",(0,n.yg)("em",{parentName:"li"},"Make sure the following are running"),": Fabric ",(0,n.yg)("inlineCode",{parentName:"li"},"network1"),", relay, and driver; Fabric ",(0,n.yg)("inlineCode",{parentName:"li"},"network2"),", relay, and driver)"),(0,n.yg)("li",{parentName:"ul"},"Navigate to the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," (for the Node.js version) or the ",(0,n.yg)("inlineCode",{parentName:"li"},"samples/fabric/go-cli")," (for the Golang version) folder in your clone of the Weaver repository."),(0,n.yg)("li",{parentName:"ul"},"(Make sure you have configured ",(0,n.yg)("inlineCode",{parentName:"li"},"fabric-cli")," as per earlier instructions)"),(0,n.yg)("li",{parentName:"ul"},"(There is no need to edit ",(0,n.yg)("inlineCode",{parentName:"li"},"chaincode.json")," to change the key as the default argument ",(0,n.yg)("inlineCode",{parentName:"li"},'"a"')," is what we intend to use in this data sharing use scenario.)"),(0,n.yg)("li",{parentName:"ul"},"Run the following:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --requesting-org=Org1MSP localhost:9080/network1/mychannel:simplestate:Read:a\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/fabric_ca_cert.pem localhost:9080/network1/mychannel:simplestate:Read:a\n"))))),(0,n.yg)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",(0,n.yg)("ul",{parentName:"li"},(0,n.yg)("li",{parentName:"ul"},"Without TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --requesting-org=Org1MSP relay-network1:9080/network1/mychannel:simplestate:Read:a\n"))),(0,n.yg)("li",{parentName:"ul"},"With TLS:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/docker/ca-cert.pem relay-network1:9080/network1/mychannel:simplestate:Read:a:173\n")))))))),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:"left"},"Notes"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"If you wish to enable end-to-end confidentiality for this data sharing session, add the ",(0,n.yg)("inlineCode",{parentName:"td"},"--e2e-confidentiality=true")," switch to any of the above commands. For example: ",(0,n.yg)("inlineCode",{parentName:"td"},"./bin/fabric-cli interop --local-network=network2 --requesting-org=Org1MSP --e2e-confidentiality=true localhost:9080/network1/mychannel:simplestate:Read:a"))))),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Query the value of the requested state (key) ",(0,n.yg)("inlineCode",{parentName:"li"},"a")," in ",(0,n.yg)("inlineCode",{parentName:"li"},"network2")," using the following:",(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli chaincode query mychannel simplestate read '[\"a\"]' --local-network=network2\n")))))}y.isMDXComponent=!0}}]);
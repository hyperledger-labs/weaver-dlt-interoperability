(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{135:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=s(a),u=n,m=p["".concat(o,".").concat(u)]||p[u]||d[u]||i;return a?r.a.createElement(m,l(l({ref:t},b),{},{components:a})):r.a.createElement(m,l({ref:t},b))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var b=2;b<i;b++)o[b]=a[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},89:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return s}));var n=a(3),r=a(7),i=(a(0),a(135)),o={id:"setup-local-docker",title:"Setup with Locally Built Dockerized Weaver Components",pagination_prev:"external/getting-started/test-network/overview",pagination_next:"external/getting-started/test-network/ledger-initialization"},l={unversionedId:"external/getting-started/test-network/setup-local-docker",id:"external/getting-started/test-network/setup-local-docker",isDocsHomePage:!1,title:"Setup with Locally Built Dockerized Weaver Components",description:"\x3c!--",source:"@site/docs/external/getting-started/test-network/setup-local-docker.md",slug:"/external/getting-started/test-network/setup-local-docker",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/test-network/setup-local-docker",editUrl:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/edit/master/docs/external/getting-started/test-network/setup-local-docker.md",version:"current",sidebar:"Documentation",previous:{title:"Setup with Locally Built Weaver Components",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/test-network/setup-local"},next:{title:"Setup with Imported Weaver Components",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/test-network/setup-packages"}},c=[{value:"Prerequisites",id:"prerequisites",children:[{value:"Software",id:"software",children:[]},{value:"Credentials",id:"credentials",children:[]}]},{value:"Getting the Code and Documentation",id:"getting-the-code-and-documentation",children:[]},{value:"Common Structures",id:"common-structures",children:[]},{value:"Hyperledger Fabric Components",id:"hyperledger-fabric-components",children:[{value:"Fabric Interoperation Node SDK",id:"fabric-interoperation-node-sdk",children:[]},{value:"Fabric Network",id:"fabric-network",children:[]},{value:"Fabric Relay",id:"fabric-relay",children:[]},{value:"Fabric Driver",id:"fabric-driver",children:[]},{value:"Fabric Client (Application)",id:"fabric-client-application",children:[]}]},{value:"Corda Components",id:"corda-components",children:[{value:"Interoperation Cordapp",id:"interoperation-cordapp",children:[]},{value:"Corda Interoperation SDK",id:"corda-interoperation-sdk",children:[]},{value:"Corda Simple Application and Client (Application)",id:"corda-simple-application-and-client-application",children:[]},{value:"Corda Network",id:"corda-network",children:[]},{value:"Corda Relay",id:"corda-relay",children:[]},{value:"Corda Driver",id:"corda-driver",children:[]}]},{value:"Tear Down the Setup",id:"tear-down-the-setup",children:[{value:"Relay",id:"relay",children:[]},{value:"Fabric Driver",id:"fabric-driver-1",children:[]},{value:"Corda Driver",id:"corda-driver-1",children:[]},{value:"Corda Network",id:"corda-network-1",children:[]},{value:"Fabric Network",id:"fabric-network-1",children:[]}]}],b={toc:c};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this document, we detail the steps using which you can bring up networks using the default configuration settings and by fetching pre-built Weaver interoperation modules, SDK libraries, and relay docker image, drivers docker images from Github Package repositories. To customize these settings (e.g., hostnames, ports), refer to the ",Object(i.b)("a",{parentName:"p",href:"/weaver-dlt-interoperability/docs/external/getting-started/test-network/advanced-configuration"},"Advanced Configuration page"),"."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Note"),": All components are run within Docker containers, except client applications."),Object(i.b)("p",null,"Follow the instructions below to build and run components followed by interoperation flows. These instructions have been tested on Ubuntu Linux (bash shell) and Mac OS. In general, they should work on any system and shell as long as the various dependencies have been installed and configured."),Object(i.b)("h2",{id:"prerequisites"},"Prerequisites"),Object(i.b)("h3",{id:"software"},"Software"),Object(i.b)("p",null,"Before starting, make sure you have the following software installed on your host machine:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Curl: ",Object(i.b)("em",{parentName:"li"},"install using package manager, like ",Object(i.b)("inlineCode",{parentName:"em"},"apt")," on Debian/Ubuntu Linux")),Object(i.b)("li",{parentName:"ul"},"Git: ",Object(i.b)("a",{parentName:"li",href:"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git"},"sample instructions")),Object(i.b)("li",{parentName:"ul"},"Docker: ",Object(i.b)("a",{parentName:"li",href:"https://docs.docker.com/engine/install/"},"sample instructions")," (Latest version)"),Object(i.b)("li",{parentName:"ul"},"Docker-Compose: ",Object(i.b)("a",{parentName:"li",href:"https://docs.docker.com/compose/install/"},"sample instructions")," (Version 1.28.2 or above)"),Object(i.b)("li",{parentName:"ul"},"Golang: ",Object(i.b)("a",{parentName:"li",href:"https://golang.org/dl/"},"sample instructions")," (Version 1.15 or above)"),Object(i.b)("li",{parentName:"ul"},"Java (JDK and JRE): ",Object(i.b)("a",{parentName:"li",href:"https://openjdk.java.net/install/"},"sample instructions")," (Version 8)"),Object(i.b)("li",{parentName:"ul"},"Node.js and NPM: ",Object(i.b)("a",{parentName:"li",href:"https://nodejs.org/en/download/package-manager/"},"sample instructions")," (Version 11 to Version 14 Supported)"),Object(i.b)("li",{parentName:"ul"},"Yarn: ",Object(i.b)("a",{parentName:"li",href:"https://classic.yarnpkg.com/en/docs/install/"},"sample instructions")),Object(i.b)("li",{parentName:"ul"},"Protoc (Protobuf compiler): ",Object(i.b)("em",{parentName:"li"},"Golang should already be installed and configured."),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Default method: Run the following with ",Object(i.b)("inlineCode",{parentName:"li"},"sudo")," if necessary. This will install both the protobuf compiler and the Go code generator plugins.",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"apt-get install protobuf-compiler\ngo get -u google.golang.org/protobuf/cmd/protoc-gen-go\ngo get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc\n"))),Object(i.b)("li",{parentName:"ul"},"If the above method installs an older version of ",Object(i.b)("inlineCode",{parentName:"li"},"protoc")," (check using ",Object(i.b)("inlineCode",{parentName:"li"},"protoc --version"),"), say below 3.12.x, you should download pre-compiled binaries instead. (With an older version, you may see errors while attempting to launch and setup the Fabric networks).",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},'sudo apt-get remove protobuf-compiler\ncurl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.15.6/protoc-3.15.6-linux-x86_64.zip\nsudo apt-get install unzip\nunzip protoc-3.15.6-linux-x86_64.zip -d <some-folder-path>\nexport PATH="$PATH:<some-folder-path>/bin"\ngo get -u google.golang.org/protobuf/cmd/protoc-gen-go\ngo get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc\n')),Object(i.b)("em",{parentName:"li"},"Note"),": The latest version at present is ",Object(i.b)("inlineCode",{parentName:"li"},"3.15.6"),", but you should check the above link to find the most current version before running the above steps.")))),Object(i.b)("h3",{id:"credentials"},"Credentials"),Object(i.b)("p",null,"Make sure you have an SSH or GPG key registered in ",Object(i.b)("a",{parentName:"p",href:"https://github.com"},"https://github.com")," to allow seamless cloning of repositories (at present, various setup scripts clone repositories using the ",Object(i.b)("inlineCode",{parentName:"p"},"https://")," prefix but this may change to ",Object(i.b)("inlineCode",{parentName:"p"},"git@")," in the future)."),Object(i.b)("h2",{id:"getting-the-code-and-documentation"},"Getting the Code and Documentation"),Object(i.b)("p",null,"Clone the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/hyperledger-labs/weaver-dlt-interoperability"},"weaver-dlt-interoperability")," repository. The code to get a basic test network up and running and test data-sharing interoperation flows lies in the subfolder ",Object(i.b)("inlineCode",{parentName:"p"},"tests/network-setups"),", which should be your starting point, though the setups will rely on other parts of the repository, as you will find out in the instructions given on this page."),Object(i.b)("h2",{id:"common-structures"},"Common Structures"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"common/protos")," folder contains structure definitions in the protobuf format that are used by all the different components. The various ",Object(i.b)("inlineCode",{parentName:"p"},"common/protos-*")," folders are meant to contain compiled protobufs (in different languages)."),Object(i.b)("p",null,"To compile the protobufs for JavaScript, do the following:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Navigate to the ",Object(i.b)("inlineCode",{parentName:"li"},"common/protos-js")," folder."),Object(i.b)("li",{parentName:"ul"},"Run the following command:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make build\n")))),Object(i.b)("p",null,"To compile the protobufs for Golang, do the following:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Navigate to the ",Object(i.b)("inlineCode",{parentName:"li"},"common/protos-go")," folder."),Object(i.b)("li",{parentName:"ul"},"Run the following command:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make build\n")))),Object(i.b)("p",null,"To compile the protobufs for Java, do the following:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Navigate to the ",Object(i.b)("inlineCode",{parentName:"li"},"common/protos-java-kt")," folder."),Object(i.b)("li",{parentName:"ul"},"Run the following command:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make build\n")))),Object(i.b)("h2",{id:"hyperledger-fabric-components"},"Hyperledger Fabric Components"),Object(i.b)("p",null,"Using the sequence of instructions below, you can start two separate Fabric networks, each with a single channel and application contract (chaincode). You can also start an interoperation contract, a relay and a ",Object(i.b)("em",{parentName:"p"},"driver")," acting on behalf of each network. You can build a Fabric CLI tool with which you can initialize both networks' ledgers with access control policies, foreign networks' security groups (i.e., membership providers' certificate chains), and some sample key-value pairs that can be shared during subsequent interoperation flows."),Object(i.b)("h3",{id:"fabric-interoperation-node-sdk"},"Fabric Interoperation Node SDK"),Object(i.b)("p",null,"A client-layer library (companion to ",Object(i.b)("inlineCode",{parentName:"p"},"hyperledger/fabric-sdk-node"),") is defined in the ",Object(i.b)("inlineCode",{parentName:"p"},"sdks/fabric/interoperation-node-sdk")," folder. This contains functions for Fabric Gateway-based applications to exercise interoperation capabilities via relays and also several utility/helper functions. The Fabric-CLI tool, which we will use later, depends on this library."),Object(i.b)("p",null,"To build the library, do the following:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Navigate to the ",Object(i.b)("inlineCode",{parentName:"li"},"sdks/fabric/interoperation-node-sdk")," folder."),Object(i.b)("li",{parentName:"ul"},"Run the following command:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make build-local\n")))),Object(i.b)("h3",{id:"fabric-network"},"Fabric Network"),Object(i.b)("p",null,"The code for this lies in the ",Object(i.b)("inlineCode",{parentName:"p"},"tests/network-setups")," folder."),Object(i.b)("p",null,"This folder contains code to create and launch networks ",Object(i.b)("inlineCode",{parentName:"p"},"network1")," and ",Object(i.b)("inlineCode",{parentName:"p"},"network2")," of identical specifications:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Network: 1 peer, 1 peer CA, 1 ordering service node, 1 ordering service CA"),Object(i.b)("li",{parentName:"ul"},"Single channel named ",Object(i.b)("inlineCode",{parentName:"li"},"mychannel")),Object(i.b)("li",{parentName:"ul"},"One of the following contracts deployed on ",Object(i.b)("inlineCode",{parentName:"li"},"mychannel"),", the choice depending on the ",Object(i.b)("a",{parentName:"li",href:"/weaver-dlt-interoperability/docs/external/interoperability-modes"},"interoperability mode")," you wish to test:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"simplestate")," (",Object(i.b)("a",{parentName:"li",href:"/weaver-dlt-interoperability/docs/external/getting-started/interop/data-sharing"},"Data Sharing"),"): supports simple transactions (",Object(i.b)("inlineCode",{parentName:"li"},"Create"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Read"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Update"),", ",Object(i.b)("inlineCode",{parentName:"li"},"Delete"),") involving storage and lookup of <key, value> pairs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"simplestatewithacl")," (",Object(i.b)("a",{parentName:"li",href:"/weaver-dlt-interoperability/docs/external/getting-started/interop/data-sharing"},"Data Sharing"),"): identical to ",Object(i.b)("inlineCode",{parentName:"li"},"simplestate")," but with extra security features to ensure that the Weaver infrastructure cannot be bypassed by a malicious client of the network."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"simpleasset")," (",Object(i.b)("a",{parentName:"li",href:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-exchange"},"Asset Exchange"),"): supports creation, modification, transfer, and deletion, as well as locking, unlocking, and claiming, of simple bonds and tokens (examples of non-fungible and fungible assets respectively)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"simpleassetandinterop")," (",Object(i.b)("a",{parentName:"li",href:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-exchange"},"Asset Exchange"),"): identical to ",Object(i.b)("inlineCode",{parentName:"li"},"simpleasset")," but where the locking, unlocking, and claiming logic is imported as a library in the chaincode rather than available in the common Fabric Interoperaton Chaincode (a Weaver component)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"simpleassettransfer")," (",Object(i.b)("a",{parentName:"li",href:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-exchange"},"Asset Exchange")," or ",Object(i.b)("a",{parentName:"li",href:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-transfer"},"Asset Transfer"),"): augmentation of ",Object(i.b)("inlineCode",{parentName:"li"},"simpleasset")," with asset pledging, claiming, and reclaiming features for cross-network transfers.")))),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Note"),": for new users, we recommend testing the Data Sharing feature first with the ",Object(i.b)("inlineCode",{parentName:"p"},"simplestate")," contract. To test the other modes, you can simply ",Object(i.b)("a",{parentName:"p",href:"#tear-down-the-setup"},"tear down")," the Fabric networks and restart them with the appropriate chaincodes installed."),Object(i.b)("p",null,"Follow the instructions below to build and launch the networks:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Navigate to the ",Object(i.b)("inlineCode",{parentName:"li"},"tests/network-setups/fabric/dev")," folder."),Object(i.b)("li",{parentName:"ul"},"To spin up both network1 and network2 with the interoperation chaincode and the default ",Object(i.b)("inlineCode",{parentName:"li"},"simplestate")," chaincode installed, run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make start-interop-local\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("em",{parentName:"li"},"To launch the networks with a different application chaincode from the above list, run"),":",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make start-interop-local CHAINCODE_NAME=<chaincode-name>\n"))),Object(i.b)("li",{parentName:"ul"},"(",Object(i.b)("em",{parentName:"li"},"Note"),": If you do not wish to test Fabric-Fabric interoperation, you can choose to install only one of the two networks along with its interoperation chaincode. For ",Object(i.b)("inlineCode",{parentName:"li"},"network1"),", run ",Object(i.b)("inlineCode",{parentName:"li"},"make start-interop-network1-local"),", and for ",Object(i.b)("inlineCode",{parentName:"li"},"network2"),", run ",Object(i.b)("inlineCode",{parentName:"li"},"make start-interop-network2-local"),".)")),Object(i.b)("p",null,"For more information, refer to the associated ",Object(i.b)("a",{parentName:"p",href:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/tree/master/tests/network-setups/fabric/dev"},"README"),"."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Troubleshooting Tips"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"If you see any errors during the launches, re-check the prerequisites (software installations and credentials). Ensure your network connection is working. As a safe bet, you can retry after cleanup: kill and remove all Docker containers and associated volumes."),Object(i.b)("li",{parentName:"ul"},"If ",Object(i.b)("inlineCode",{parentName:"li"},"protoc")," or ",Object(i.b)("inlineCode",{parentName:"li"},"protoc-gen-go")," throws an error, reinstall ",Object(i.b)("inlineCode",{parentName:"li"},"protoc")," and ",Object(i.b)("inlineCode",{parentName:"li"},"protoc-gen-go")," using suggestions made in the Prerequisites section above.")),Object(i.b)("h3",{id:"fabric-relay"},"Fabric Relay"),Object(i.b)("p",null,"The relay is a module acting on behalf of a network, enabling interoperation flows with other networks by communicating with their relays.\nThe code for this lies in the ",Object(i.b)("inlineCode",{parentName:"p"},"core/relay")," folder. Navigate to the ",Object(i.b)("inlineCode",{parentName:"p"},"core/relay")," folder."),Object(i.b)("h4",{id:"building-relay-image"},"Building Relay Image"),Object(i.b)("p",null,"To build the docker image for relay, run:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make build-server-local\n")),Object(i.b)("h4",{id:"deployment"},"Deployment"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Run: ",Object(i.b)("inlineCode",{parentName:"li"},"make convert-compose-method2")," to uncomment and comment some lines in ",Object(i.b)("inlineCode",{parentName:"li"},"docker-compose.yaml"),"."),Object(i.b)("li",{parentName:"ul"},"For ",Object(i.b)("inlineCode",{parentName:"li"},"network1"),", there's ",Object(i.b)("inlineCode",{parentName:"li"},".env.n1")," file in ",Object(i.b)("inlineCode",{parentName:"li"},"docker/testnet-envs")," directory, that will be used to start a relay server in docker. Edit the file, and update the following value:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"DOCKER_IMAGE_NAME=weaver-relay-server\n"))),Object(i.b)("li",{parentName:"ul"},"Repeat above step for ",Object(i.b)("inlineCode",{parentName:"li"},".env.n2")," file in ",Object(i.b)("inlineCode",{parentName:"li"},"docker/testnet-envs")," directory, that will be used to start relay server for ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," in docker."),Object(i.b)("li",{parentName:"ul"},"To deploy relay server for ",Object(i.b)("inlineCode",{parentName:"li"},"network1"),", run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.n1'\n"))),Object(i.b)("li",{parentName:"ul"},"For ",Object(i.b)("inlineCode",{parentName:"li"},"network2"),", there's ",Object(i.b)("inlineCode",{parentName:"li"},".env.n2")," file in ",Object(i.b)("inlineCode",{parentName:"li"},"docker/testnet-envs")," directory, that will be used to start a relay server in docker. "),Object(i.b)("li",{parentName:"ul"},"To deploy relay server for ",Object(i.b)("inlineCode",{parentName:"li"},"network2"),", run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.n2'\n")))),Object(i.b)("p",null,"For more information, see the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/tree/master/core/relay/relay-docker.md"},"relay-docker README"),"."),Object(i.b)("h3",{id:"fabric-driver"},"Fabric Driver"),Object(i.b)("p",null,"A driver is a DLT-specific plugin invoked by the relay while channelling external data queries to the local peer network and collecting a response with proofs. The Fabric driver is built as a Fabric client application on the ",Object(i.b)("inlineCode",{parentName:"p"},"fabric-network")," NPM package.\nThe code for this lies in the ",Object(i.b)("inlineCode",{parentName:"p"},"core/drivers/fabric-driver")," folder. Navigate to the ",Object(i.b)("inlineCode",{parentName:"p"},"core/drivers/fabric-driver")," folder."),Object(i.b)("h4",{id:"building"},"Building"),Object(i.b)("p",null,"To build the fabric-driver image, run:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make build-image-local\n")),Object(i.b)("h4",{id:"deployment-1"},"Deployment"),Object(i.b)("p",null,"Following steps demonstrate how to run a fabric driver in docker container (",Object(i.b)("em",{parentName:"p"},"replace ",Object(i.b)("inlineCode",{parentName:"em"},"<PATH-TO-WEAVER>")," with location of the clone of your weaver"),")."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"For ",Object(i.b)("inlineCode",{parentName:"li"},"network1"),", there's ",Object(i.b)("inlineCode",{parentName:"li"},".env.n1")," file in ",Object(i.b)("inlineCode",{parentName:"li"},"docker-testnet-envs")," directory, that will be used to start a fabric driver in docker. ",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Edit that file and replace ",Object(i.b)("inlineCode",{parentName:"li"},"<PATH-TO-WEAVER>")," with the absolute path of the ",Object(i.b)("inlineCode",{parentName:"li"},"weaver-dlt-interoperability")," clone folder."),Object(i.b)("li",{parentName:"ul"},"Update the following value:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"DOCKER_IMAGE_NAME=weaver-fabric-driver\n"))))),Object(i.b)("li",{parentName:"ul"},"Repeat above step for ",Object(i.b)("inlineCode",{parentName:"li"},".env.n2")," file in ",Object(i.b)("inlineCode",{parentName:"li"},"docker-testnet-envs")," directory, that will be used to start fabric driver for ",Object(i.b)("inlineCode",{parentName:"li"},"network2")," in docker."),Object(i.b)("li",{parentName:"ul"},"To deploy fabric driver for ",Object(i.b)("inlineCode",{parentName:"li"},"network1"),", run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.n1'\n"))),Object(i.b)("li",{parentName:"ul"},"To deploy fabric driver for ",Object(i.b)("inlineCode",{parentName:"li"},"network2"),", run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.n2'\n")))),Object(i.b)("h3",{id:"fabric-client-application"},"Fabric Client (Application)"),Object(i.b)("p",null,"The CLI is used to interact with a Fabric network, configure it and run chaincode transactions to record data on the channel ledger or query data. It is also used to interact with remote networks through the relay in order to trigger an interoperation flow for data request and acceptance."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"fabric-cli")," Node.js source code is located in the ",Object(i.b)("inlineCode",{parentName:"p"},"samples/fabric/fabric-cli")," folder and the Golang source code in the ",Object(i.b)("inlineCode",{parentName:"p"},"samples/fabric/go-cli")," folder."),Object(i.b)("h4",{id:"prerequisites-1"},"Prerequisites"),Object(i.b)("p",null,"If you are using a Linux system, make sure that lib64 is installed."),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Note"),": For the Node.js version of the ",Object(i.b)("inlineCode",{parentName:"p"},"fabric-cli"),", the setup and running instructions below were tested with all Node.js versions from v11.14.0 to v14.17.3."),Object(i.b)("h4",{id:"installation"},"Installation"),Object(i.b)("p",null,"You can install ",Object(i.b)("inlineCode",{parentName:"p"},"fabric-cli")," as follows (for both the Node.js and Golang versions):"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Navigate to the ",Object(i.b)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," folder or the ",Object(i.b)("inlineCode",{parentName:"li"},"samples/fabric/go-cli")," folder."),Object(i.b)("li",{parentName:"ul"},"Run the following to install dependencies (for the Node.js version) or the executable (for the Golang version):",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make build-local\n"))),Object(i.b)("li",{parentName:"ul"},"Use the ",Object(i.b)("inlineCode",{parentName:"li"},"fabric-cli")," executable in the ",Object(i.b)("inlineCode",{parentName:"li"},"bin")," folder for ",Object(i.b)("a",{parentName:"li",href:"/weaver-dlt-interoperability/docs/external/getting-started/test-network/ledger-initialization"},"subsequent actions"),".")),Object(i.b)("h2",{id:"corda-components"},"Corda Components"),Object(i.b)("p",null,"Using the sequence of instructions below, you can start a Corda network and run an application Cordapp on it. You can also run an interoperation Cordapp, a relay and a ",Object(i.b)("em",{parentName:"p"},"driver")," acting on behalf of the network. You can initialize the network's vault with access control policies, foreign networks' security groups (i.e., membership providers' certificate chains), and some sample state values that can be shared during subsequent interoperation flows."),Object(i.b)("h3",{id:"interoperation-cordapp"},"Interoperation Cordapp"),Object(i.b)("p",null,"The interoperation Cordapp is deployed to run as part of any Corda application flow that involves cross-network interoperation."),Object(i.b)("p",null,"Build the interoperation Cordapp as follows:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Navigate to the ",Object(i.b)("inlineCode",{parentName:"li"},"core/network/corda-interop-app")," folder."),Object(i.b)("li",{parentName:"ul"},"Run the following to create the JAR files on which other Corda network components will depend on:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make build-local\n")))),Object(i.b)("h3",{id:"corda-interoperation-sdk"},"Corda Interoperation SDK"),Object(i.b)("p",null,"A client-layer library is defined in the ",Object(i.b)("inlineCode",{parentName:"p"},"sdks/corda")," folder. This contains functions for Corda based client applications to exercise interoperation capabilities via relays and also several utility/helper functions. The Corda Client tool, which we will use later, depends on this library."),Object(i.b)("p",null,"To build the library, do the following:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Navigate to the ",Object(i.b)("inlineCode",{parentName:"li"},"sdks/corda")," folder."),Object(i.b)("li",{parentName:"ul"},"Run the following command (",Object(i.b)("em",{parentName:"li"},"make sure there is no github.properties file present in the directory"),"):",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make build\n")))),Object(i.b)("h3",{id:"corda-simple-application-and-client-application"},"Corda Simple Application and Client (Application)"),Object(i.b)("p",null,"This is a simple Cordapp that maintains a state of type ",Object(i.b)("inlineCode",{parentName:"p"},"SimpleState"),", which is a set of key-value pairs (of strings).\nThe code for this lies in the ",Object(i.b)("inlineCode",{parentName:"p"},"samples/corda/corda-simple-application")," folder."),Object(i.b)("p",null,"Build the ",Object(i.b)("inlineCode",{parentName:"p"},"corda-simple-application")," Cordapp as follows:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Navigate to the ",Object(i.b)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder."),Object(i.b)("li",{parentName:"ul"},"Run the following:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make build-local\n")))),Object(i.b)("h3",{id:"corda-network"},"Corda Network"),Object(i.b)("p",null,"The Corda network code lies in the ",Object(i.b)("inlineCode",{parentName:"p"},"tests/network-setups/corda")," folder. You can launch two Corda networks (",Object(i.b)("inlineCode",{parentName:"p"},"Corda_Network")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Corda_Network2"),"). The networks use ",Object(i.b)("inlineCode",{parentName:"p"},"samples/corda/corda-simple-application")," by default, which maintains a state of type ",Object(i.b)("inlineCode",{parentName:"p"},"SimpleState"),", which is a set of key-value pairs (of strings)."),Object(i.b)("p",null,"Follow the instructions below to build and launch the network:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Navigate to the ",Object(i.b)("inlineCode",{parentName:"li"},"tests/network-setups/corda")," folder."),Object(i.b)("li",{parentName:"ul"},"To spin up the Corda networks with the Interoperation Cordapps:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Each consisting of 1 node and a notary (for data-transfer), run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make start-local\n"))),Object(i.b)("li",{parentName:"ul"},"Each consisting of 2 nodes and a notary (for asset-exchange/transfer), run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},'make start-local PROFILE="2-nodes"\n'))),Object(i.b)("li",{parentName:"ul"},"Each consisting of 3 nodes and a notary (for asset-exchange/transfer), run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},'make start-local PROFILE="3-nodes"\n')))))),Object(i.b)("p",null,"You should see the following message in the terminal:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"Waiting for network node services to start\n")),Object(i.b)("p",null,"The Corda nodes and notary may take a while (several minutes on memory-constrained systems) to start. If they start up successfully, you should something like the following:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"PartyA node services started\nPartyB node services started\nNotary node services started\n")),Object(i.b)("h3",{id:"corda-relay"},"Corda Relay"),Object(i.b)("p",null,"Navigate to the ",Object(i.b)("inlineCode",{parentName:"p"},"core/relay")," folder. Refer ",Object(i.b)("a",{parentName:"p",href:"#building-relay-image"},"here")," to build the relay image if not already built. Now run a relay for ",Object(i.b)("inlineCode",{parentName:"p"},"Corda_Network")," in docker as follows:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Run: ",Object(i.b)("inlineCode",{parentName:"li"},"make convert-compose-method2")," to uncomment and comment some lines in ",Object(i.b)("inlineCode",{parentName:"li"},"docker-compose.yaml"),"."),Object(i.b)("li",{parentName:"ul"},"There's ",Object(i.b)("inlineCode",{parentName:"li"},".env.corda")," file in ",Object(i.b)("inlineCode",{parentName:"li"},"docker/testnet-envs")," directory, that will be used to start a relay server in docker. Edit the file, and modify following values:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"DOCKER_IMAGE_NAME=weaver-relay-server\n"))),Object(i.b)("li",{parentName:"ul"},"To deploy relay for ",Object(i.b)("inlineCode",{parentName:"li"},"Corda_Network"),", run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.corda'\n"))),Object(i.b)("li",{parentName:"ul"},"To deploy relay for ",Object(i.b)("inlineCode",{parentName:"li"},"Corda_Network2"),", run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make start-server COMPOSE_ARG='--env-file docker/testnet-envs/.env.corda2'\n")))),Object(i.b)("h3",{id:"corda-driver"},"Corda Driver"),Object(i.b)("p",null,"Navigate to the ",Object(i.b)("inlineCode",{parentName:"p"},"core/drivers/corda-driver")," folder."),Object(i.b)("h4",{id:"building-1"},"Building"),Object(i.b)("p",null,"To build the corda driver docker image, run:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make image-local\n")),Object(i.b)("h4",{id:"deployment-2"},"Deployment"),Object(i.b)("p",null,"Run a Corda driver as follows:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"There's a ",Object(i.b)("inlineCode",{parentName:"li"},".env.corda")," file in ",Object(i.b)("inlineCode",{parentName:"li"},"docker-testnet-envs")," directory, that will be used to start a corda driver in docker. Edit the file and update the following value:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre"},"DOCKER_IMAGE_NAME=weaver-corda-driver\n"))),Object(i.b)("li",{parentName:"ul"},"To deploy Corda driver for ",Object(i.b)("inlineCode",{parentName:"li"},"Corda_Network"),", run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.corda'\n"))),Object(i.b)("li",{parentName:"ul"},"To deploy Corda driver for ",Object(i.b)("inlineCode",{parentName:"li"},"Corda_Network2"),", run:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",{parentName:"pre",className:"language-bash"},"make deploy COMPOSE_ARG='--env-file docker-testnet-envs/.env.corda2'\n")))),Object(i.b)("p",null,"If the driver starts successfully, it should log the following message, when you run ",Object(i.b)("inlineCode",{parentName:"p"},"docker logs corda-driver-Corda_Network"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"Corda driver gRPC server started. Listening on port 9099\n")),Object(i.b)("h2",{id:"tear-down-the-setup"},"Tear Down the Setup"),Object(i.b)("p",null,"Bring down the various components as follows (",Object(i.b)("em",{parentName:"p"},"Navigate to the root folder of your clone of the Weaver repository"),"):"),Object(i.b)("h3",{id:"relay"},"Relay"),Object(i.b)("p",null,"To bring down the relays (for all 3 networks), run:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"cd core/relay\nmake stop COMPOSE_ARG='--env-file .env.n1'\nmake stop COMPOSE_ARG='--env-file .env.n2'\nmake stop COMPOSE_ARG='--env-file .env.corda'\nmake stop COMPOSE_ARG='--env-file .env.corda2'\ncd -\n")),Object(i.b)("h3",{id:"fabric-driver-1"},"Fabric Driver"),Object(i.b)("p",null,"To bring down the fabric drivers (for both networks), run:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"cd core/drivers/fabric-driver\nmake stop COMPOSE_ARG='--env-file .env.n1'\nmake stop COMPOSE_ARG='--env-file .env.n2'\ncd -\n")),Object(i.b)("h3",{id:"corda-driver-1"},"Corda Driver"),Object(i.b)("p",null,"To bring down the corda driver, run:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"cd core/drivers/corda-driver\nmake stop COMPOSE_ARG='--env-file docker-testnet-envs/.env.corda'\nmake stop COMPOSE_ARG='--env-file docker-testnet-envs/.env.corda2'\ncd -\n")),Object(i.b)("h3",{id:"corda-network-1"},"Corda Network"),Object(i.b)("p",null,"To bring down the Corda network:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"cd tests/network-setups/corda\nmake clean\ncd -\n")),Object(i.b)("h3",{id:"fabric-network-1"},"Fabric Network"),Object(i.b)("p",null,"To bring down both of the Fabric networks along with weaver components:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"cd tests/network-setups/fabric/dev\nmake clean\ncd -\n")))}s.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{122:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return o})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return s}));var r=a(3),n=a(7),l=(a(0),a(136)),i={id:"data-sharing",title:"Data Sharing",pagination_prev:"external/getting-started/interop/overview",pagination_next:"external/getting-started/enabling-weaver-network/overview"},o={unversionedId:"external/getting-started/interop/data-sharing",id:"external/getting-started/interop/data-sharing",isDocsHomePage:!1,title:"Data Sharing",description:"\x3c!--",source:"@site/docs/external/getting-started/interop/data-sharing.md",slug:"/external/getting-started/interop/data-sharing",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/data-sharing",editUrl:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/edit/master/docs/external/getting-started/interop/data-sharing.md",version:"current",sidebar:"Documentation",previous:{title:"Testing Interoperation Modes Overview",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/overview"},next:{title:"Asset Exchange",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-exchange"}},c=[{value:"Corda to Corda",id:"corda-to-corda",children:[]},{value:"Corda to Fabric",id:"corda-to-fabric",children:[]},{value:"Fabric to Corda",id:"fabric-to-corda",children:[]},{value:"Fabric to Fabric",id:"fabric-to-fabric",children:[]}],b={toc:c};function s(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(l.b)("wrapper",Object(r.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"This document lists sample ways in which you can exercise the data-sharing interoperation protocol on the test network ",Object(l.b)("a",{parentName:"p",href:"../test-network/overview"},"launched earlier"),"."),Object(l.b)("p",null,"Once the networks, relays, and drivers have been launched, and the ledgers bootstrapped, you can trigger four different interoperation flows corresponding to distinct data-sharing combinations as follows:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("strong",{parentName:"li"},"Corda to Corda"),": Either Corda network requests state and proof from another Corda network"),Object(l.b)("li",{parentName:"ol"},Object(l.b)("strong",{parentName:"li"},"Corda to Fabric"),": The Corda network requests state and proof from either Fabric network"),Object(l.b)("li",{parentName:"ol"},Object(l.b)("strong",{parentName:"li"},"Fabric to Corda"),": Either Fabric network requests state and proof from the Corda network"),Object(l.b)("li",{parentName:"ol"},Object(l.b)("strong",{parentName:"li"},"Fabric to Fabric"),": One Fabric network requests state and proof from another Fabric network")),Object(l.b)("p",null,"We assume that one of the following chaincodes have been deployed in either Fabric network you are testing with:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"simplestate")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"simplestatewithacl"))),Object(l.b)("h2",{id:"corda-to-corda"},"Corda to Corda"),Object(l.b)("p",null,"To test the scenario where ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network")," requests the value of the state (key) ",Object(l.b)("inlineCode",{parentName:"p"},"H")," from ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network2"),", do the following:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"(",Object(l.b)("em",{parentName:"li"},"Make sure the following are running"),": ",Object(l.b)("inlineCode",{parentName:"li"},"Corda_Network"),", relay, and driver; ",Object(l.b)("inlineCode",{parentName:"li"},"Corda_Network2"),", relay, and driver)"),Object(l.b)("li",{parentName:"ul"},"Navigate to the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder."),Object(l.b)("li",{parentName:"ul"},"Run the following:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9082/Corda_Network2/localhost:30006#com.cordaSimpleApplication.flow.GetStateByKey:H\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/fabric_ca_cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9082/Corda_Network2/localhost:30006#com.cordaSimpleApplication.flow.GetStateByKey:H\n"))))),Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-corda2:9082/Corda_Network2/corda_network2_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/docker/ca-cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-corda2:9082/Corda_Network2/corda_network2_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H\n"))))))),Object(l.b)("li",{parentName:"ul"},"Query the value of the requested state using key ",Object(l.b)("inlineCode",{parentName:"li"},"H")," in ",Object(l.b)("inlineCode",{parentName:"li"},"Corda_Network")," by running the following command:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-state H\n")))),Object(l.b)("p",null,"To test the scenario where ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network2")," requests the value of the state (key) ",Object(l.b)("inlineCode",{parentName:"p"},"C")," from ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network"),", do the following:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"(",Object(l.b)("em",{parentName:"li"},"Make sure the following are running"),": ",Object(l.b)("inlineCode",{parentName:"li"},"Corda_Network"),", relay, and driver; ",Object(l.b)("inlineCode",{parentName:"li"},"Corda_Network2"),", relay, and driver)"),Object(l.b)("li",{parentName:"ul"},"Navigate to the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder."),Object(l.b)("li",{parentName:"ul"},"Run the following:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients request-state localhost:9082 localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:C\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/fabric_ca_cert.pem NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients request-state localhost:9082 localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:C\n"))))),Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients request-state localhost:9082 relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:C\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/docker/ca-cert.pem NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients request-state localhost:9082 relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:C\n"))))))),Object(l.b)("li",{parentName:"ul"},"Query the value of the requested state, using the key ",Object(l.b)("inlineCode",{parentName:"li"},"C")," in ",Object(l.b)("inlineCode",{parentName:"li"},"Corda_Network")," by running the following command:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients get-state C\n")))),Object(l.b)("h2",{id:"corda-to-fabric"},"Corda to Fabric"),Object(l.b)("p",null,"To test the scenario where ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network")," requests the value of the state (key) ",Object(l.b)("inlineCode",{parentName:"p"},"a")," from ",Object(l.b)("inlineCode",{parentName:"p"},"network1"),", do the following:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"(",Object(l.b)("em",{parentName:"li"},"Make sure the following are running"),": Corda network, relay, and driver; Fabric ",Object(l.b)("inlineCode",{parentName:"li"},"network1"),", relay, and driver)"),Object(l.b)("li",{parentName:"ul"},"Navigate to the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder."),Object(l.b)("li",{parentName:"ul"},"Run the following:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9080/network1/mychannel:simplestate:Read:a\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/fabric_ca_cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9080/network1/mychannel:simplestate:Read:a\n"))))),Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-network1:9080/network1/mychannel:simplestate:Read:a\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/docker/ca-cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-network1:9080/network1/mychannel:simplestate:Read:a\n"))))))),Object(l.b)("li",{parentName:"ul"},"Query the value of the requested state (key) ",Object(l.b)("inlineCode",{parentName:"li"},"a")," in ",Object(l.b)("inlineCode",{parentName:"li"},"Corda_Network")," using the following:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-state a\n")))),Object(l.b)("p",null,"To test the scenario where ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network")," requests the value of the state (key) ",Object(l.b)("inlineCode",{parentName:"p"},"Arcturus")," from ",Object(l.b)("inlineCode",{parentName:"p"},"network2"),", do the following:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"(",Object(l.b)("em",{parentName:"li"},"Make sure the following are running"),": Corda network, relay, and driver; Fabric ",Object(l.b)("inlineCode",{parentName:"li"},"network2"),", relay, and driver)"),Object(l.b)("li",{parentName:"ul"},"Navigate to the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder."),Object(l.b)("li",{parentName:"ul"},"Run the following:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9083/network2/mychannel:simplestate:Read:Arcturus\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/fabric_ca_cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 localhost:9083/network2/mychannel:simplestate:Read:Arcturus\n"))))),Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"RELAY_TLS=true RELAY_TLSCA_CERT_PATHS=../../../core/relay/credentials/docker/ca-cert.pem NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients request-state localhost:9081 relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus\n"))))))),Object(l.b)("li",{parentName:"ul"},"Query the value of the requested state (key) ",Object(l.b)("inlineCode",{parentName:"li"},"Arcturus")," in ",Object(l.b)("inlineCode",{parentName:"li"},"Corda_Network")," using the following:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-state Arcturus\n")))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Note:")," You can test the above data transfer scenario with ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network2")," instead of ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network")," by changing the following in the ",Object(l.b)("inlineCode",{parentName:"p"},"request-state")," or ",Object(l.b)("inlineCode",{parentName:"p"},"get-state")," command:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Network name environment variable:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"NETWORK_NAME=Corda_Network")," to ",Object(l.b)("inlineCode",{parentName:"li"},"NETWORK_NAME=Corda_Network2")))),Object(l.b)("li",{parentName:"ul"},"Corda node's RPC endpoint port environment variable:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CORDA_PORT=10006")," to ",Object(l.b)("inlineCode",{parentName:"li"},"CORDA_PORT=30006")))),Object(l.b)("li",{parentName:"ul"},"Local relay address:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"localhost:9081")," to ",Object(l.b)("inlineCode",{parentName:"li"},"localhost:9082")," (host deployment of relays and drivers)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"relay-corda2:9081")," to ",Object(l.b)("inlineCode",{parentName:"li"},"relay-corda2:9082")," (Docker container deployment of relays and drivers)")))),Object(l.b)("h2",{id:"fabric-to-corda"},"Fabric to Corda"),Object(l.b)("p",null,"To test the scenario where ",Object(l.b)("inlineCode",{parentName:"p"},"network1")," requests the value of the state (key) ",Object(l.b)("inlineCode",{parentName:"p"},"H")," from ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network"),", do the following:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"(",Object(l.b)("em",{parentName:"li"},"Make sure the following are running"),": Corda network, relay, and driver; Fabric ",Object(l.b)("inlineCode",{parentName:"li"},"network1"),", relay, and driver)"),Object(l.b)("li",{parentName:"ul"},"Navigate to the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," (for the Node.js version) or the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/fabric/go-cli")," (for the Golang version) folder."),Object(l.b)("li",{parentName:"ul"},"(Make sure you have configured ",Object(l.b)("inlineCode",{parentName:"li"},"fabric-cli")," as per earlier instructions)"),Object(l.b)("li",{parentName:"ul"},"Edit ",Object(l.b)("inlineCode",{parentName:"li"},"chaincode.json"),": in the ",Object(l.b)("inlineCode",{parentName:"li"},"simplestate:Create:args")," attribute, replace the argument ",Object(l.b)("inlineCode",{parentName:"li"},'"a"')," with ",Object(l.b)("inlineCode",{parentName:"li"},'"H"')," (this specifies the key to which the data from the remote view is to be written into); i.e.,:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-json"},'"args": ["a", ""]\n')),"with",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-json"},'"args": ["H", ""]\n'))),Object(l.b)("li",{parentName:"ul"},"Run the following:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --sign=true --requesting-org=Org1MSP localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --sign=true --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/fabric_ca_cert.pem localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))))),Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --sign=true --requesting-org=Org1MSP relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --sign=true --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/docker/ca-cert.pem relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))))))),Object(l.b)("li",{parentName:"ul"},"Query the value of the requested state (key) ",Object(l.b)("inlineCode",{parentName:"li"},"H")," in ",Object(l.b)("inlineCode",{parentName:"li"},"network1")," using the following:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli chaincode query mychannel simplestate read '[\"H\"]' --local-network=network1\n")))),Object(l.b)("p",null,"To test the scenario where ",Object(l.b)("inlineCode",{parentName:"p"},"network2")," requests the value of the state (key) ",Object(l.b)("inlineCode",{parentName:"p"},"H")," from ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network"),", do the following:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"(",Object(l.b)("em",{parentName:"li"},"Make sure the following are running"),": Corda network, relay, and driver; Fabric ",Object(l.b)("inlineCode",{parentName:"li"},"network2"),", relay, and driver)"),Object(l.b)("li",{parentName:"ul"},"Navigate to the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," (for the Node.js version) or the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/fabric/go-cli")," (for the Golang version) folder."),Object(l.b)("li",{parentName:"ul"},"(Make sure you have configured ",Object(l.b)("inlineCode",{parentName:"li"},"fabric-cli")," as per earlier instructions)"),Object(l.b)("li",{parentName:"ul"},"Edit ",Object(l.b)("inlineCode",{parentName:"li"},"chaincode.json"),": in the ",Object(l.b)("inlineCode",{parentName:"li"},"simplestate:Create:args")," attribute, replace the argument ",Object(l.b)("inlineCode",{parentName:"li"},'"a"')," with ",Object(l.b)("inlineCode",{parentName:"li"},'"H"')," (this specifies the key to which the data from the remote view is to be written into); i.e.,:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-json"},'"args": ["a", ""]\n')),"with",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-json"},'"args": ["H", ""]\n'))),Object(l.b)("li",{parentName:"ul"},"Run the following:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --sign=true --requesting-org=Org1MSP localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --sign=true --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/fabric_ca_cert.pem localhost:9081/Corda_Network/localhost:10006#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))))),Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --sign=true --requesting-org=Org1MSP relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --sign=true --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/docker/ca-cert.pem relay-corda:9081/Corda_Network/corda_partya_1:10003#com.cordaSimpleApplication.flow.GetStateByKey:H --debug=true\n"))))))),Object(l.b)("li",{parentName:"ul"},"Query the value of the requested state (key) ",Object(l.b)("inlineCode",{parentName:"li"},"H")," in ",Object(l.b)("inlineCode",{parentName:"li"},"network2")," using the following:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli chaincode query mychannel simplestate read '[\"H\"]' --local-network=network2\n")))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Note:")," You can test the above data transfer scenario with ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network2")," instead of ",Object(l.b)("inlineCode",{parentName:"p"},"Corda_Network")," by changing the following in the view address (last parameter in the ",Object(l.b)("inlineCode",{parentName:"p"},"interop")," command):"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Local relay address (prefix):",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"localhost:9081")," to ",Object(l.b)("inlineCode",{parentName:"li"},"localhost:9082")," (host deployment of relays and drivers)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"relay-corda2:9081")," to ",Object(l.b)("inlineCode",{parentName:"li"},"relay-corda2:9082")," (Docker container deployment of relays and drivers)"))),Object(l.b)("li",{parentName:"ul"},"Network name:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Corda_Network")," to ",Object(l.b)("inlineCode",{parentName:"li"},"Corda_Network2")))),Object(l.b)("li",{parentName:"ul"},"Corda node's RPC endpoint:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"localhost:10006")," to ",Object(l.b)("inlineCode",{parentName:"li"},"localhost:30006")," (host deployment of relays and drivers)"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"corda_partya_1:10003")," to ",Object(l.b)("inlineCode",{parentName:"li"},"corda_network2_partya_1:10003")," (Docker container deployment of relays and drivers)")))),Object(l.b)("h2",{id:"fabric-to-fabric"},"Fabric to Fabric"),Object(l.b)("p",null,"To test the scenario where ",Object(l.b)("inlineCode",{parentName:"p"},"network1")," requests the value of the state (key) ",Object(l.b)("inlineCode",{parentName:"p"},"Arcturus")," from ",Object(l.b)("inlineCode",{parentName:"p"},"network2"),", do the following:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"(",Object(l.b)("em",{parentName:"li"},"Make sure the following are running"),": Fabric ",Object(l.b)("inlineCode",{parentName:"li"},"network1"),", relay, and driver; Fabric ",Object(l.b)("inlineCode",{parentName:"li"},"network2"),", relay, and driver)"),Object(l.b)("li",{parentName:"ul"},"Navigate to the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," (for the Node.js version) or the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/fabric/go-cli")," (for the Golang version) folder."),Object(l.b)("li",{parentName:"ul"},"(Make sure you have configured ",Object(l.b)("inlineCode",{parentName:"li"},"fabric-cli")," as per earlier instructions)"),Object(l.b)("li",{parentName:"ul"},"Edit ",Object(l.b)("inlineCode",{parentName:"li"},"chaincode.json"),": in the ",Object(l.b)("inlineCode",{parentName:"li"},"simplestate:Create:args")," attribute, replace the argument ",Object(l.b)("inlineCode",{parentName:"li"},'"a"')," with ",Object(l.b)("inlineCode",{parentName:"li"},'"Arcturus"')," (this specifies the key to which the data from the remote view is to be written into); i.e.,:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-json"},'"args": ["a", ""]\n')),"with",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-json"},'"args": ["Arcturus", ""]\n'))),Object(l.b)("li",{parentName:"ul"},"Run the following:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --requesting-org=Org1MSP localhost:9083/network2/mychannel:simplestate:Read:Arcturus\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/fabric_ca_cert.pem localhost:9083/network2/mychannel:simplestate:Read:Arcturus\n"))))),Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --requesting-org=Org1MSP relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network1 --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/docker/ca-cert.pem relay-network2:9083/network2/mychannel:simplestate:Read:Arcturus\n"))))))),Object(l.b)("li",{parentName:"ul"},"Query the value of the requested state (key) ",Object(l.b)("inlineCode",{parentName:"li"},"Arcturus")," in ",Object(l.b)("inlineCode",{parentName:"li"},"network1")," using the following:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli chaincode query mychannel simplestate read '[\"Arcturus\"]' --local-network=network1\n")))),Object(l.b)("p",null,"To test the scenario where ",Object(l.b)("inlineCode",{parentName:"p"},"network2")," requests the value of the state (key) ",Object(l.b)("inlineCode",{parentName:"p"},"a")," from ",Object(l.b)("inlineCode",{parentName:"p"},"network1"),", do the following:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"(",Object(l.b)("em",{parentName:"li"},"Make sure the following are running"),": Fabric ",Object(l.b)("inlineCode",{parentName:"li"},"network1"),", relay, and driver; Fabric ",Object(l.b)("inlineCode",{parentName:"li"},"network2"),", relay, and driver)"),Object(l.b)("li",{parentName:"ul"},"Navigate to the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," (for the Node.js version) or the ",Object(l.b)("inlineCode",{parentName:"li"},"samples/fabric/go-cli")," (for the Golang version) folder."),Object(l.b)("li",{parentName:"ul"},"(Make sure you have configured ",Object(l.b)("inlineCode",{parentName:"li"},"fabric-cli")," as per earlier instructions)"),Object(l.b)("li",{parentName:"ul"},"(There is no need to edit ",Object(l.b)("inlineCode",{parentName:"li"},"chaincode.json")," to change the key as the default argument ",Object(l.b)("inlineCode",{parentName:"li"},'"a"')," is what we intend to use in this data sharing use scenario.)"),Object(l.b)("li",{parentName:"ul"},"Run the following:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in the host machine:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --requesting-org=Org1MSP localhost:9080/network1/mychannel:simplestate:Read:a\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/fabric_ca_cert.pem localhost:9080/network1/mychannel:simplestate:Read:a\n"))))),Object(l.b)("li",{parentName:"ul"},"If Relays and Drivers are deployed in Docker containers:",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"Without TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --requesting-org=Org1MSP relay-network1:9080/network1/mychannel:simplestate:Read:a\n"))),Object(l.b)("li",{parentName:"ul"},"With TLS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli interop --local-network=network2 --requesting-org=Org1MSP --relay-tls=true --relay-tls-ca-files=../../../core/relay/credentials/docker/ca-cert.pem relay-network1:9080/network1/mychannel:simplestate:Read:a:173\n"))))))),Object(l.b)("li",{parentName:"ul"},"Query the value of the requested state (key) ",Object(l.b)("inlineCode",{parentName:"li"},"a")," in ",Object(l.b)("inlineCode",{parentName:"li"},"network2")," using the following:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli chaincode query mychannel simplestate read '[\"a\"]' --local-network=network2\n")))))}s.isMDXComponent=!0},136:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var r=a(0),n=a.n(r);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var b=n.a.createContext({}),s=function(e){var t=n.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return n.a.createElement(b.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},m=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,b=c(e,["components","mdxType","originalType","parentName"]),p=s(a),m=r,u=p["".concat(i,".").concat(m)]||p[m]||d[m]||l;return a?n.a.createElement(u,o(o({ref:t},b),{},{components:a})):n.a.createElement(u,o({ref:t},b))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var b=2;b<l;b++)i[b]=a[b];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"}}]);
"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileCheckpointer = void 0;
const Long = __importStar(require("long"));
const fs = __importStar(require("fs"));
const encoding = 'utf8';
class FileCheckpointer {
    constructor(path) {
        this.transactionIds = new Set();
        this.path = path;
    }
    async init() {
        await this.load();
        await this.save();
    }
    async addTransactionId(transactionId) {
        this.transactionIds.add(transactionId);
        await this.save();
    }
    getBlockNumber() {
        return Promise.resolve(this.blockNumber);
    }
    getTransactionIds() {
        return Promise.resolve(this.transactionIds);
    }
    async setBlockNumber(blockNumber) {
        this.blockNumber = blockNumber;
        this.transactionIds.clear();
        await this.save();
    }
    async load() {
        const data = await this.readFile();
        if (data) {
            const json = data.toString(encoding);
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            const state = JSON.parse(json);
            this.setState(state);
        }
    }
    async readFile() {
        try {
            return await fs.promises.readFile(this.path);
        }
        catch (err) {
            // Ignore error on non-existent file
        }
    }
    setState(state) {
        this.blockNumber = state.blockNumber ? Long.fromString(state.blockNumber) : undefined;
        this.transactionIds = new Set(state.transactionIds);
    }
    async save() {
        const state = this.getState();
        const json = JSON.stringify(state);
        const data = Buffer.from(json, encoding);
        await fs.promises.writeFile(this.path, data);
    }
    getState() {
        var _a;
        return {
            blockNumber: (_a = this.blockNumber) === null || _a === void 0 ? void 0 : _a.toString(),
            transactionIds: Array.from(this.transactionIds)
        };
    }
}
exports.FileCheckpointer = FileCheckpointer;
//# sourceMappingURL=filecheckpointer.js.map
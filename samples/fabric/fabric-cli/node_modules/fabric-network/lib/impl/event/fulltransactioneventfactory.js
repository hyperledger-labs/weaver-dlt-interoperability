"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newFullTransactionEvent = exports.getTransactionEnvelopeIndexes = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
const fabproto6 = __importStar(require("fabric-protos"));
const gatewayutils_1 = require("../gatewayutils");
const fullcontracteventfactory_1 = require("./fullcontracteventfactory");
const TransactionStatus = __importStar(require("./transactionstatus"));
function getTransactionEnvelopeIndexes(blockData) {
    const txEnvelopeIndexes = [];
    if (blockData.data) {
        const envelopes = blockData.data.data || [];
        envelopes.forEach((envelope, index) => {
            if (isTransactionPayload(envelope.payload)) {
                txEnvelopeIndexes.push(index);
            }
        });
    }
    return txEnvelopeIndexes;
}
exports.getTransactionEnvelopeIndexes = getTransactionEnvelopeIndexes;
function isTransactionPayload(payload) {
    return payload.header.channel_header.type === fabproto6.common.HeaderType.ENDORSER_TRANSACTION;
}
function newFullTransactionEvent(blockEvent, txEnvelopeIndex) {
    const block = blockEvent.blockData;
    if (block.metadata && block.data && block.data.data) {
        const blockMetadata = block.metadata.metadata || [];
        const transactionStatusCodes = blockMetadata[fabproto6.common.BlockMetadataIndex.TRANSACTIONS_FILTER];
        const envelope = block.data.data[txEnvelopeIndex];
        const transactionId = envelope.payload.header.channel_header.tx_id;
        const code = transactionStatusCodes[txEnvelopeIndex];
        const status = TransactionStatus.getStatusForCode(code);
        const transactionEvent = {
            transactionId,
            status,
            transactionData: envelope.payload.data,
            isValid: status === TransactionStatus.VALID_STATUS,
            getBlockEvent: () => blockEvent,
            getContractEvents: (0, gatewayutils_1.cachedResult)(() => (0, fullcontracteventfactory_1.newFullContractEvents)(transactionEvent))
        };
        return Object.freeze(transactionEvent);
    }
    throw Error('Missing transaction data');
}
exports.newFullTransactionEvent = newFullTransactionEvent;
//# sourceMappingURL=fulltransactioneventfactory.js.map
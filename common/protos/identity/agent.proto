syntax = "proto3";

package identity.agent;

import "common/ack.proto";
import "common/membership.proto";

option java_package = "com.weaver.protos.identity.agent";
option go_package = "github.com/hyperledger-labs/weaver-dlt-interoperability/common/protos-go/identity";

// definitions of all messages used in the datatransfer protocol
service IINAgent {
  // user or agent triggers a sync of external/foreign network unit's state
  rpc SyncExternalState(NetworkUnitIdentity) returns (common.ack.Ack) {}
  // Requesting network unit's state from a foreign IIN agent.
  rpc RequestIdentityConfiguration(NetworkUnitIdentity) returns (common.ack.Ack){}
  // Handling network unit's state sent by a foreign IIN agent.
  rpc SendIdentityConfiguration(AttestedMembership) returns (common.ack.Ack){}
  // user or agent triggers a flow to collect signatures attesting an
  // external/foreign network unit's state and recording to ledger
  rpc FlowAndRecordAttestations(NetworkUnitIdentity) returns (common.ack.Ack) {}
  // Requesting attestation from a local IIN agent.
  rpc RequestAttestation(AttestedSecurityDomain) returns (common.ack.Ack){}
  // Handling attestation sent by a local IIN agent.
  rpc SendAttestation(AttestedSecurityDomain) returns (common.ack.Ack){}
}

// Unique identifier for a unit of a network that runs an IIN agent
message NetworkUnitIdentity {
  string network_id = 1;
  string participant_id = 2;
}

// Association of signature (over arbitrary data) and signer identity
message Attestation {
  NetworkUnitIdentity unit_identity = 1;
  string certificate = 2;
  string signature = 3;
}

// Attested security domain membership by a single member
message AttestedMembership {
  common.membership.Membership membership = 1;
  Attestation attestation = 2;
}

// Counter attestation over security domain membership attested by its participants
message AttestedSecurityDomain {
  message AttestedMembershipSet {
    common.membership.Membership membership = 1;
    repeated Attestation attestations = 2;
  }
  AttestedMembershipSet security_domain = 1;
  repeated Attestation attestations = 2;
}

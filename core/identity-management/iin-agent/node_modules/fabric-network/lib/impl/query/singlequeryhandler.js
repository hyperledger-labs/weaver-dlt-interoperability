"use strict";
/*
 * Copyright 2018, 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingleQueryHandler = void 0;
const fabricerror_1 = require("../../errors/fabricerror");
const util = __importStar(require("util"));
const Logger = __importStar(require("../../logger"));
const logger = Logger.getLogger('SingleQueryHandler');
class SingleQueryHandler {
    constructor(peers) {
        this.currentPeerIndex = 0;
        logger.debug('constructor: peers=%j', peers.map((peer) => peer.name));
        this.peers = peers;
    }
    async evaluate(query) {
        const method = 'evaluate';
        logger.debug('%s - start', method);
        const startPeerIndex = this.currentPeerIndex;
        const errorMessages = [];
        for (let i = 0; i < this.peers.length; i++) {
            const peerIndex = (startPeerIndex + i) % this.peers.length;
            this.currentPeerIndex = peerIndex;
            const peer = this.peers[peerIndex];
            logger.debug('%s - sending to peer %s', method, peer.name);
            const results = await query.evaluate([peer]);
            const result = results[peer.name];
            if (result instanceof Error) {
                errorMessages.push(result.toString());
            }
            else {
                if (result.isEndorsed) {
                    logger.debug('%s - return peer response status: %s', method, result.status);
                    return result.payload;
                }
                else {
                    logger.debug('%s - throw peer response status: %s message: %s', method, result.status, result.message);
                    const responseError = Object.assign(new Error('peer error response: ' + result.message), result);
                    throw responseError;
                }
            }
        }
        const message = util.format('Query failed. Errors: %j', errorMessages);
        const error = new fabricerror_1.FabricError(message);
        logger.error('evaluate:', error);
        throw error;
    }
}
exports.SingleQueryHandler = SingleQueryHandler;
//# sourceMappingURL=singlequeryhandler.js.map
"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newPrivateBlockEvent = void 0;
const gatewayutils_1 = require("../gatewayutils");
const fullblockeventfactory_1 = require("./fullblockeventfactory");
const fullcontracteventfactory_1 = require("./fullcontracteventfactory");
const fulltransactioneventfactory_1 = require("./fulltransactioneventfactory");
const util = __importStar(require("util"));
function newPrivateBlockEvent(eventInfo) {
    const privateData = eventInfo.privateData;
    if (!privateData) {
        throw new Error('No private data found: ' + util.inspect(eventInfo));
    }
    const fullBlockEvent = (0, fullblockeventfactory_1.newFullBlockEvent)(eventInfo);
    const privateBlockEvent = {
        blockNumber: fullBlockEvent.blockNumber,
        blockData: fullBlockEvent.blockData,
        getTransactionEvents: (0, gatewayutils_1.cachedResult)(() => newPrivateTransactionEvents(privateBlockEvent, privateData))
    };
    return Object.freeze(privateBlockEvent);
}
exports.newPrivateBlockEvent = newPrivateBlockEvent;
function newPrivateTransactionEvents(blockEvent, privateData) {
    return (0, fulltransactioneventfactory_1.getTransactionEnvelopeIndexes)(blockEvent.blockData)
        .map((index) => newPrivateTransactionEvent(blockEvent, index, privateData[index]));
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function newPrivateTransactionEvent(blockEvent, index, privateData) {
    const fullTransactionEvent = (0, fulltransactioneventfactory_1.newFullTransactionEvent)(blockEvent, index);
    const privateTransactionEvent = {
        transactionId: fullTransactionEvent.transactionId,
        status: fullTransactionEvent.status,
        transactionData: fullTransactionEvent.transactionData,
        isValid: fullTransactionEvent.isValid,
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        privateData,
        getBlockEvent: () => blockEvent,
        getContractEvents: (0, gatewayutils_1.cachedResult)(() => (0, fullcontracteventfactory_1.newFullContractEvents)(privateTransactionEvent))
    };
    return Object.freeze(privateTransactionEvent);
}
//# sourceMappingURL=privateblockeventfactory.js.map
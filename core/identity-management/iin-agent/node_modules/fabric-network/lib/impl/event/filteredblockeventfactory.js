"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newFilteredBlockEvent = void 0;
const gatewayutils_1 = require("../gatewayutils");
const TransactionStatus = __importStar(require("./transactionstatus"));
const util = __importStar(require("util"));
function newFilteredBlockEvent(eventInfo) {
    if (!eventInfo.filteredBlock) {
        throw new Error('No block data found: ' + util.inspect(eventInfo));
    }
    const blockEvent = {
        blockNumber: eventInfo.blockNumber,
        blockData: eventInfo.filteredBlock,
        getTransactionEvents: (0, gatewayutils_1.cachedResult)(() => newFilteredTransactionEvents(blockEvent))
    };
    return Object.freeze(blockEvent);
}
exports.newFilteredBlockEvent = newFilteredBlockEvent;
function newFilteredTransactionEvents(blockEvent) {
    const filteredTransactions = blockEvent.blockData.filtered_transactions || [];
    return filteredTransactions.map((tx) => newFilteredTransactionEvent(blockEvent, tx));
}
function newFilteredTransactionEvent(blockEvent, filteredTransaction) {
    const status = TransactionStatus.getStatusForCode(filteredTransaction.tx_validation_code);
    const transactionEvent = {
        transactionId: filteredTransaction.txid,
        status: status,
        transactionData: filteredTransaction,
        isValid: status === TransactionStatus.VALID_STATUS,
        getBlockEvent: () => blockEvent,
        getContractEvents: (0, gatewayutils_1.cachedResult)(() => newFilteredContractEvents(transactionEvent))
    };
    return Object.freeze(transactionEvent);
}
function newFilteredContractEvents(transactionEvent) {
    var _a;
    const chaincodeActions = ((_a = transactionEvent.transactionData.transaction_actions) === null || _a === void 0 ? void 0 : _a.chaincode_actions) || [];
    return chaincodeActions.map((ccAction) => newFilteredContractEvent(transactionEvent, ccAction.chaincode_event));
}
function newFilteredContractEvent(transactionEvent, chaincodeEvent) {
    const contractEvent = {
        chaincodeId: chaincodeEvent.chaincode_id,
        eventName: chaincodeEvent.event_name,
        getTransactionEvent: () => transactionEvent
    };
    return Object.freeze(contractEvent);
}
//# sourceMappingURL=filteredblockeventfactory.js.map
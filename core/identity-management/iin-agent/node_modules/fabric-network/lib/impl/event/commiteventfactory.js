"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newCommitEvent = void 0;
const gatewayutils_1 = require("../gatewayutils");
const filteredblockeventfactory_1 = require("./filteredblockeventfactory");
const TransactionStatus = __importStar(require("./transactionstatus"));
const util = __importStar(require("util"));
function newCommitEvent(peer, eventInfo) {
    if (!eventInfo.transactionId || !eventInfo.status) {
        throw new Error('Invalid event info for commit event: ' + util.inspect(eventInfo));
    }
    const transactionId = eventInfo.transactionId;
    const getBlockEvent = (0, gatewayutils_1.cachedResult)(() => (0, filteredblockeventfactory_1.newFilteredBlockEvent)(eventInfo));
    const getTransactionEvent = (0, gatewayutils_1.cachedResult)(() => {
        const blockEvent = getBlockEvent();
        const transactionEvent = blockEvent.getTransactionEvents().find((tx) => tx.transactionId === transactionId);
        if (!transactionEvent) {
            throw new Error(`Transaction ${transactionId} does not exist in block: ${util.inspect(blockEvent)}`);
        }
        return transactionEvent;
    });
    const commitEvent = {
        peer,
        transactionId,
        status: eventInfo.status,
        get transactionData() {
            return getTransactionEvent().transactionData;
        },
        isValid: eventInfo.status === TransactionStatus.VALID_STATUS,
        getBlockEvent,
        getContractEvents: () => getTransactionEvent().getContractEvents()
    };
    return Object.freeze(commitEvent);
}
exports.newCommitEvent = newCommitEvent;
//# sourceMappingURL=commiteventfactory.js.map
(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{106:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return s}));var a=n(3),i=n(7),r=(n(0),n(136)),l={id:"asset-exchange",title:"Asset Exchange",pagination_prev:"external/getting-started/interop/overview",pagination_next:"external/getting-started/enabling-weaver-network/overview"},o={unversionedId:"external/getting-started/interop/asset-exchange",id:"external/getting-started/interop/asset-exchange",isDocsHomePage:!1,title:"Asset Exchange",description:"\x3c!--",source:"@site/docs/external/getting-started/interop/asset-exchange.md",slug:"/external/getting-started/interop/asset-exchange",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-exchange",editUrl:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/edit/master/docs/external/getting-started/interop/asset-exchange.md",version:"current",sidebar:"Documentation",previous:{title:"Data Sharing",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/data-sharing"},next:{title:"Asset Transfer",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-transfer"}},b=[{value:"Fabric with Fabric",id:"fabric-with-fabric",children:[]},{value:"Fabric with Corda",id:"fabric-with-corda",children:[]},{value:"Corda with Corda",id:"corda-with-corda",children:[]}],c={toc:b};function s(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This document lists sample ways in which you can exercise the asset-exchange interoperation protocol on the test network ",Object(r.b)("a",{parentName:"p",href:"../test-network/overview"},"launched earlier"),"."),Object(r.b)("p",null,"For this scenario, you only need the networks to be running with the appropriate contracts deployed and the ledgers bootstrapped. You do not need to run relays and drivers. You can run the following combinations of exchanges (",Object(r.b)("em",{parentName:"p"},"other combinations of DLTs will be supported soon"),")."),Object(r.b)("h2",{id:"fabric-with-fabric"},"Fabric with Fabric"),Object(r.b)("p",null,"One Fabric network transfers a bond from Alice to Bob in exchange for a transfer of tokens from Bob to Alice in the other network\nAssuming that one of the following chaincodes have been deployed in both networks:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"simpleasset")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"simpleassetandinterop")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"simpleassettransfer"),"\nrun the following steps:")),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Navigate to either the ",Object(r.b)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," folder or the ",Object(r.b)("inlineCode",{parentName:"li"},"samples/fabric/go-cli")," folder in your clone of the Weaver repository."),Object(r.b)("li",{parentName:"ol"},"Run the following to verify the status of the assets owned by ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," and ",Object(r.b)("inlineCode",{parentName:"li"},"bob")," in the two networks:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getAssetStatus.sh 2\n"))),Object(r.b)("li",{parentName:"ol"},"Complete the asset exchange in either of the two different ways:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Using a single command:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Run the following to trigger exchange of bond ",Object(r.b)("inlineCode",{parentName:"li"},"bond01:a03")," owned by ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(r.b)("inlineCode",{parentName:"li"},"network1")," with ",Object(r.b)("inlineCode",{parentName:"li"},"100")," units of tokens ",Object(r.b)("inlineCode",{parentName:"li"},"token1")," owned by ",Object(r.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(r.b)("inlineCode",{parentName:"li"},"network2"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-all --network1=network1 --network2=network2 --secret=secrettext --timeout-duration=100 alice:bond01:a03:bob:token1:100\n"))),Object(r.b)("li",{parentName:"ul"},"To verify that ",Object(r.b)("inlineCode",{parentName:"li"},"bob")," now owns a bond in exchange for ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," owning some tokens, run the following:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getAssetStatus.sh 2\n"))))),Object(r.b)("li",{parentName:"ul"},"Using step-by-step commands:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," locking ",Object(r.b)("inlineCode",{parentName:"li"},"bond01:a03")," for ",Object(r.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(r.b)("inlineCode",{parentName:"li"},"network1"),Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=1 --timeout-duration=3600 --locker=alice --recipient=bob --secret=<hash-pre-image> --target-network=network1 --param=bond01:a03\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to verify ",Object(r.b)("inlineCode",{parentName:"li"},"alice"),"'s lock:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=2 --locker=alice --recipient=bob --target-network=network1 --param=bond01:a03\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"bob")," locking ",Object(r.b)("inlineCode",{parentName:"li"},"100")," units of ",Object(r.b)("inlineCode",{parentName:"li"},"token1")," for ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(r.b)("inlineCode",{parentName:"li"},"network2"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=3 --timeout-duration=1800 --locker=bob --recipient=alice --hash=<hash-value> --target-network=network2 --param=token1:100\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to verify ",Object(r.b)("inlineCode",{parentName:"li"},"bob"),"'s lock:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=4 --locker=bob --recipient=alice --target-network=network2 --contract-id=<contract-id>\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"alice"),"'s claim for ",Object(r.b)("inlineCode",{parentName:"li"},"100")," units of ",Object(r.b)("inlineCode",{parentName:"li"},"token1")," locked by ",Object(r.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(r.b)("inlineCode",{parentName:"li"},"network2"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=5 --recipient=alice --locker=bob --target-network=network2 --contract-id=<contract-id> --secret=<hash-pre-image>\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"bob"),"'s claim for ",Object(r.b)("inlineCode",{parentName:"li"},"bond01:a03")," locked by ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(r.b)("inlineCode",{parentName:"li"},"network1"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=6 --recipient=bob --locker=alice --target-network=network1 --param=bond01:a03 --secret=<hash-pre-image>\n")))),"The above steps complete a successful asset exchange between two Fabric networks.\nIn addition to the above commands, following are the extra options:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," wants to unlock the bond asset, run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"alice"),"'s re-claim for ",Object(r.b)("inlineCode",{parentName:"li"},"bond01:a03")," locked in ",Object(r.b)("inlineCode",{parentName:"li"},"network1"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=7 --locker=alice --recipient=bob --target-network=network1 --param=bond01:a03\n"))),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("inlineCode",{parentName:"li"},"bob")," wants to unlock the token asset, run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"bob"),"'s re-claim for ",Object(r.b)("inlineCode",{parentName:"li"},"token1:100")," locked in ",Object(r.b)("inlineCode",{parentName:"li"},"network2"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=8 --locker=bob --recipient=alice --target-network=network2 --contract-id=<contract-id>\n")))))))),Object(r.b)("h2",{id:"fabric-with-corda"},"Fabric with Corda"),Object(r.b)("p",null,"We will demonstrate asset exchange of a bond in Fabric ",Object(r.b)("inlineCode",{parentName:"p"},"network1")," with tokens on ",Object(r.b)("inlineCode",{parentName:"p"},"Corda_Network"),".\nFor Fabric commands, run from ",Object(r.b)("inlineCode",{parentName:"p"},"samples/fabric/fabric-cli")," folder, and for Corda commands, run from ",Object(r.b)("inlineCode",{parentName:"p"},"samples/corda/corda-simple-application")," folder. Here ",Object(r.b)("inlineCode",{parentName:"p"},"Alice")," and ",Object(r.b)("inlineCode",{parentName:"p"},"Bob")," in Fabric ",Object(r.b)("inlineCode",{parentName:"p"},"network1")," correspond to ",Object(r.b)("inlineCode",{parentName:"p"},"PartyA")," (",Object(r.b)("inlineCode",{parentName:"p"},"CORDA_PORT=10006"),") and ",Object(r.b)("inlineCode",{parentName:"p"},"PartyB")," (",Object(r.b)("inlineCode",{parentName:"p"},"CORDA_PORT=10009"),") in ",Object(r.b)("inlineCode",{parentName:"p"},"Corda_Network")," respectively. Following are the step-by-step asset exchange process:"),Object(r.b)("p",null,"(",Object(r.b)("em",{parentName:"p"},"Note: the hash used in following steps can be replaced by any valid ",Object(r.b)("inlineCode",{parentName:"em"},"sha256")," hash"),")"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Run the following to verify the status of the bond assets owned by ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," and ",Object(r.b)("inlineCode",{parentName:"li"},"bob")," in the Fabric network ",Object(r.b)("inlineCode",{parentName:"li"},"network1")," from ",Object(r.b)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," folder:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getAssetStatus.sh\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to verify the status of the assets owned by ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA")," and ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," in the ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network")," from ",Object(r.b)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder:")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getAssetStatus.sh\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," locking ",Object(r.b)("inlineCode",{parentName:"li"},"bond01:a03")," for ",Object(r.b)("inlineCode",{parentName:"li"},"bob")," in ",Object(r.b)("inlineCode",{parentName:"li"},"network1")," for 60 mins:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=1 --timeout-duration=3600 --locker=alice --recipient=bob --hash==ivHErp1x4bJDKuRo6L5bApO/DdoyD/dG0mAZrzLZEIs= --target-network=network1 --param=bond01:a03\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to verify ",Object(r.b)("inlineCode",{parentName:"li"},"alice"),"'s lock:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=2 --locker=alice --recipient=bob --target-network=network1 --param=bond01:a03\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," locking ",Object(r.b)("inlineCode",{parentName:"li"},"50")," units of token type ",Object(r.b)("inlineCode",{parentName:"li"},"t1")," for ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA")," in ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network")," for 30 mins:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},'CORDA_PORT=10009 ./clients/build/install/clients/bin/clients lock-asset --fungible --hashBase64=ivHErp1x4bJDKuRo6L5bApO/DdoyD/dG0mAZrzLZEIs= --timeout=1800 --recipient="O=PartyA,L=London,C=GB" --param=t1:50\n')),"Note the ",Object(r.b)("inlineCode",{parentName:"li"},"contract-id")," displayed after successful execution of the command, will be used in next steps."),Object(r.b)("li",{parentName:"ul"},"Run the following to verify ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB"),"'s lock (can be verified by both parties):",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients is-asset-locked --contract-id=<contract-id>\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA"),"'s claim for ",Object(r.b)("inlineCode",{parentName:"li"},"50")," units of token type ",Object(r.b)("inlineCode",{parentName:"li"},"t1")," locked by ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," in ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients claim-asset --secret=secrettext --contract-id=<contract-id>\n")),"(",Object(r.b)("em",{parentName:"li"},"Note: Here the ",Object(r.b)("inlineCode",{parentName:"em"},"PartyB")," can see the node's log to get the revealed the hash preimage, to use it to claim bond in Fabric network."),")"),Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"bob"),"'s claim for ",Object(r.b)("inlineCode",{parentName:"li"},"bond01:a03")," locked by ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," in ",Object(r.b)("inlineCode",{parentName:"li"},"network1"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=6 --recipient=bob --locker=alice --target-network=network1 --param=bond01:a03 --secret=secrettext\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to verify the status of the bond assets owned by ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," and ",Object(r.b)("inlineCode",{parentName:"li"},"bob")," in the Fabric network ",Object(r.b)("inlineCode",{parentName:"li"},"network1")," from ",Object(r.b)("inlineCode",{parentName:"li"},"samples/fabric/fabric-cli")," folder:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getAssetStatus.sh\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to verify the status of the assets owned by ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA")," and ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," in the ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network")," from ",Object(r.b)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getAssetStatus.sh\n")))),Object(r.b)("p",null,"The above steps complete a successful asset exchange between Fabric and Corda networks.\nIn addition to the above commands, following are the extra options:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("inlineCode",{parentName:"li"},"alice")," wants to unlock the bond asset, run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"alice"),"'s re-claim for ",Object(r.b)("inlineCode",{parentName:"li"},"bond01:a03")," locked in ",Object(r.b)("inlineCode",{parentName:"li"},"network1"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset exchange-step --step=7 --locker=alice --recipient=bob --target-network=network1 --param=bond01:a03\n"))),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," wants to unlock the token asset, run the following to trigger unlock for ",Object(r.b)("inlineCode",{parentName:"li"},"t1:50")," locked in ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10009 ./clients/build/install/clients/bin/clients unlock-asset --contract-id=<contract-id>\n")))),Object(r.b)("h2",{id:"corda-with-corda"},"Corda with Corda"),Object(r.b)("p",null,"We will demonstrate asset exchange of a tokens in ",Object(r.b)("inlineCode",{parentName:"p"},"Corda_Network")," with tokens on ",Object(r.b)("inlineCode",{parentName:"p"},"Corda_Network2"),". Here ",Object(r.b)("inlineCode",{parentName:"p"},"PartyA")," (",Object(r.b)("inlineCode",{parentName:"p"},"CORDA_PORT=10006"),") and ",Object(r.b)("inlineCode",{parentName:"p"},"PartyB")," (",Object(r.b)("inlineCode",{parentName:"p"},"CORDA_PORT=10009"),") in ",Object(r.b)("inlineCode",{parentName:"p"},"Corda_Network")," correspond to ",Object(r.b)("inlineCode",{parentName:"p"},"PartyA")," (",Object(r.b)("inlineCode",{parentName:"p"},"CORDA_PORT=30006"),") and ",Object(r.b)("inlineCode",{parentName:"p"},"PartyB")," (",Object(r.b)("inlineCode",{parentName:"p"},"CORDA_PORT=30009"),") in ",Object(r.b)("inlineCode",{parentName:"p"},"Corda_Network2")," respectively. Following are the step-by-step asset exchange process:"),Object(r.b)("p",null,"  (",Object(r.b)("em",{parentName:"p"},"Note: the hash used in following steps can be replaced by any valid ",Object(r.b)("inlineCode",{parentName:"em"},"sha256")," hash"),")"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Navigate to ",Object(r.b)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder. "),Object(r.b)("li",{parentName:"ul"},"Run the following to verify the status of the tokens owned by ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA")," and ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," in the ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network")," and ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network2"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getAssetStatus.sh 2\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA")," locking ",Object(r.b)("inlineCode",{parentName:"li"},"30")," units of token type ",Object(r.b)("inlineCode",{parentName:"li"},"t1")," for ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," in ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network")," for 60 mins:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},'CORDA_PORT=10006 ./clients/build/install/clients/bin/clients lock-asset --fungible --hashBase64=ivHErp1x4bJDKuRo6L5bApO/DdoyD/dG0mAZrzLZEIs= --timeout=3600 --recipient="O=PartyB,L=London,C=GB" --param=t1:30\n')),"Note the ",Object(r.b)("inlineCode",{parentName:"li"},"contract-id")," displayed after successful execution of the command, will be used in next steps. Let's denote it ",Object(r.b)("inlineCode",{parentName:"li"},"<contract-id-1>"),"."),Object(r.b)("li",{parentName:"ul"},"Run the following to verify ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA"),"'s lock (can be verified by both parties):",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10009 ./clients/build/install/clients/bin/clients is-asset-locked --contract-id=<contract-id-1>\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," locking ",Object(r.b)("inlineCode",{parentName:"li"},"50")," units of token type ",Object(r.b)("inlineCode",{parentName:"li"},"t2")," for ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA")," in ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network2")," for 30 mins:",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},'CORDA_PORT=30009 ./clients/build/install/clients/bin/clients lock-asset --fungible --hashBase64=ivHErp1x4bJDKuRo6L5bApO/DdoyD/dG0mAZrzLZEIs= --timeout=1800 --recipient="O=PartyA,L=London,C=GB" --param=t2:50\n')),"Note the ",Object(r.b)("inlineCode",{parentName:"li"},"contract-id")," displayed after successful execution of the command, will be used in next steps. Let's denote it ",Object(r.b)("inlineCode",{parentName:"li"},"<contract-id-2>"),"."),Object(r.b)("li",{parentName:"ul"},"Run the following to verify ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB"),"'s lock (can be verified by both parties):",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=30006 ./clients/build/install/clients/bin/clients is-asset-locked --contract-id=<contract-id-2>\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA"),"'s claim for ",Object(r.b)("inlineCode",{parentName:"li"},"50")," units of token type ",Object(r.b)("inlineCode",{parentName:"li"},"t2")," locked by ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," in ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network2"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=30006 ./clients/build/install/clients/bin/clients claim-asset --secret=secrettext --contract-id=<contract-id-2>\n")),"(",Object(r.b)("em",{parentName:"li"},"Note: Here the ",Object(r.b)("inlineCode",{parentName:"em"},"PartyB")," can see the node's log to get the revealed the hash preimage, to use it to claim bond in Fabric network."),")"),Object(r.b)("li",{parentName:"ul"},"Run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB"),"'s claim for ",Object(r.b)("inlineCode",{parentName:"li"},"30")," units of token type ",Object(r.b)("inlineCode",{parentName:"li"},"t1")," locked by ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA")," in ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients claim-asset --secret=secrettext --contract-id=<contract-id-1>\n"))),Object(r.b)("li",{parentName:"ul"},"Run the following to verify the status of the tokens owned by ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA")," and ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," in the ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network")," and ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network2"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"./scripts/getAssetStatus.sh 2\n")))),Object(r.b)("p",null,"The above steps complete a successful asset exchange between two Corda networks.\nIn addition to the above commands, following are the extra options:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA")," wants to unlock the token ",Object(r.b)("inlineCode",{parentName:"li"},"t1:30")," asset, run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"PartyA"),"'s re-claim in ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients unlock-asset --contract-id=<contract-id-1>\n"))),Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB")," wants to unlock the token ",Object(r.b)("inlineCode",{parentName:"li"},"t2:50")," asset, run the following to trigger ",Object(r.b)("inlineCode",{parentName:"li"},"PartyB"),"'s re-claim in ",Object(r.b)("inlineCode",{parentName:"li"},"Corda_Network2"),":",Object(r.b)("pre",{parentName:"li"},Object(r.b)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=30009 ./clients/build/install/clients/bin/clients unlock-asset --contract-id=<contract-id-2>\n")))))}s.isMDXComponent=!0},136:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return O}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),s=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,O=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return n?i.a.createElement(O,o(o({ref:t},c),{},{components:n})):i.a.createElement(O,o({ref:t},c))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=m;var o={};for(var b in t)hasOwnProperty.call(t,b)&&(o[b]=t[b]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);
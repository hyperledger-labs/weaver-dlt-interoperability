# This is a basic workflow to help you get started with Actions

name: Asset Exchange Tests

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  asset-exchange-fabric:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
          
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      
      # FABRIC NETWORK
      - name: Start Fabric Network
        run: make start-interop CHAINCODE_NAME=simpleasset
        working-directory: tests/network-setups/fabric/dev
        
      # FABRIC CLI
      - name: Setup Fabric CLI .npmrc
        run: |
          cp .npmrc.template .npmrc
          sed -i "s/<personal-access-token>/${{ secrets.GITHUB_TOKEN }}/g" .npmrc
          cat .npmrc
        working-directory: samples/fabric/fabric-cli
      - name: Build Fabric CLI
        run: npm install
        working-directory: samples/fabric/fabric-cli
      - name: Setup Fabric CLI Config
        run: |
          echo ${GITHUB_WORKSPACE}
          cp config.template.json config.json
          sed -i "s#<PATH-TO-WEAVER>#${GITHUB_WORKSPACE}#g" config.json
        working-directory: samples/fabric/fabric-cli
      - name: Setup Fabric CLI ENV
        run: |
          echo ${GITHUB_WORKSPACE}
          cp .env.template .env
          ./bin/fabric-cli env set MEMBER_CREDENTIAL_FOLDER ${GITHUB_WORKSPACE}/samples/fabric/fabric-cli/src/data/credentials_docker
          ./bin/fabric-cli env set CONFIG_PATH ${GITHUB_WORKSPACE}/samples/fabric/fabric-cli/config.json
          cat .env
        working-directory: samples/fabric/fabric-cli
        
      - name: Fabric CLI Init
        run: ./scripts/initAsset.sh
        working-directory: samples/fabric/fabric-cli
        
      - name: Asset Exchange Fabric CLI Tests
        run: |
          COUNT=0
          TOTAL=1

          # FABRIC2 - FABRIC1
          ./bin/fabric-cli asset exchange-all --network1=network1 --network2=network2 --secret=secrettext --timeout-duration=100 bob:bond01:a04:alice:token1:100 &> tmp.out
          tail -n 2 tmp.out | grep "Asset Exchange Complete." && COUNT=$(( COUNT + 1 )) && echo "PASS"
          cat tmp.out

          # RESULT
          echo "Passed $COUNT/$TOTAL Tests."

          if [ $COUNT == $TOTAL ]; then
              exit 0
          else
              exit 1
          fi
        working-directory: samples/fabric/fabric-cli

  asset-exchange-fabric-local:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
          
      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
          
      - name: Use Protoc 3.15
        run: |
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.15.6/protoc-3.15.6-linux-x86_64.zip
          unzip protoc-3.15.6-linux-x86_64.zip -d protoc
          go get -u google.golang.org/protobuf/cmd/protoc-gen-go
          go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
          
      # PROTOS
      - name: Build JS Protos
        run: |
          export PATH="$PATH:${GITHUB_WORKSPACE}/protoc/bin"
          make build
        working-directory: common/protos-js
        
      # Build Dependencies
      - name: Build Fabric Interop SDK
        run: make build-local
        working-directory: sdks/fabric/interoperation-node-sdk
    
      - name: Build Fabric CLI
        run: make build-local
        working-directory: samples/fabric/fabric-cli
        
      # FABRIC NETWORK
      - name: Setup Simpleasset
        run: |
          GOMODCACHE=`go env GOMODCACHE`
          echo "GO MOD Path: ${GOMODCACHE}"
          go mod download github.com/hyperledger-labs/weaver-dlt-interoperability/core/network/fabric-interop-cc/interfaces/asset-mgmt
          chmod +wr -R ${GOMODCACHE}
          rm -rf ${GOMODCACHE}/github.com/hyperledger-labs/weaver-dlt-interoperability/core/network/fabric-interop-cc/interfaces/asset-mgmt*/*
          cp -r ../../../core/network/fabric-interop-cc/interfaces/asset-mgmt/* ${GOMODCACHE}/github.com/hyperledger-labs/weaver-dlt-interoperability/core/network/fabric-interop-cc/interfaces/asset-mgmt*/
          ls -lh ${GOMODCACHE}/github.com/hyperledger-labs/weaver-dlt-interoperability/core/network/fabric-interop-cc/interfaces/asset-mgmt*
        working-directory: samples/fabric/simpleasset
      - name: Start Fabric Network
        run: make start-interop-local CHAINCODE_NAME=simpleasset
        working-directory: tests/network-setups/fabric/dev
        
      # FABRIC CLI
      - name: Setup Fabric CLI Config
        run: |
          echo ${GITHUB_WORKSPACE}
          cp config.template.json config.json
          sed -i "s#<PATH-TO-WEAVER>#${GITHUB_WORKSPACE}#g" config.json
        working-directory: samples/fabric/fabric-cli
      - name: Setup Fabric CLI ENV
        run: |
          echo ${GITHUB_WORKSPACE}
          cp .env.template .env
          ./bin/fabric-cli env set MEMBER_CREDENTIAL_FOLDER ${GITHUB_WORKSPACE}/samples/fabric/fabric-cli/src/data/credentials_docker
          ./bin/fabric-cli env set CONFIG_PATH ${GITHUB_WORKSPACE}/samples/fabric/fabric-cli/config.json
          cat .env
        working-directory: samples/fabric/fabric-cli
        
      - name: Fabric CLI Init
        run: ./scripts/initAsset.sh
        working-directory: samples/fabric/fabric-cli
        
      - name: Asset Exchange Fabric CLI Tests
        run: |
          COUNT=0
          TOTAL=1

          # FABRIC2 - FABRIC1
          ./bin/fabric-cli asset exchange-all --network1=network1 --network2=network2 --secret=secrettext --timeout-duration=100 bob:bond01:a04:alice:token1:100 &> tmp.out
          tail -n 2 tmp.out | grep "Asset Exchange Complete." && COUNT=$(( COUNT + 1 )) && echo "PASS"
          cat tmp.out

          # RESULT
          echo "Passed $COUNT/$TOTAL Tests."

          if [ $COUNT == $TOTAL ]; then
              exit 0
          else
              exit 1
          fi
        working-directory: samples/fabric/fabric-cli
        
    asset-exchange-corda:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v2
        
        - name: Set up JDK 8
          uses: actions/setup-java@v2
          with:
            java-version: '8'
            distribution: 'adopt'
            
        # CORDA NETWORK
        - name: Generate github.properties (on pull_request)
          if: ${{ github.event_name == 'pull_request' }}
          run: |
            echo "Using ${GITHUB_ACTOR} user."
            echo "username=${GITHUB_ACTOR}" >> github.properties
            echo "password=${{ secrets.GITHUB_TOKEN }}" >> github.properties
            echo "url=https://maven.pkg.github.com/${GITHUB_ACTOR}/weaver-dlt-interoperability" >> github.properties
            
            echo "Using ${GITHUB_ACTOR} user."
            echo "username=${GITHUB_ACTOR}" >> github.main.properties
            echo "password=${{ secrets.GITHUB_TOKEN }}" >> github.main.properties
            echo "url=https://maven.pkg.github.com/hyperledger-labs/weaver-dlt-interoperability" >> github.main.properties
            
            ./scripts/get-cordapps.sh || mv github.main.properties github.properties
            
            cat github.properties
          working-directory: tests/network-setups/corda
   
        - name: Generate github.properties (else)
          if: ${{ github.event_name != 'pull_request' }}
          run: |
            echo "Using ${GITHUB_ACTOR} user."
            echo "username=${GITHUB_ACTOR}" >> github.properties
            echo "password=${{ secrets.GITHUB_TOKEN }}" >> github.properties
            echo "url=https://maven.pkg.github.com/hyperledger-labs/weaver-dlt-interoperability" >> github.properties
            cat github.properties
          working-directory: tests/network-setups/corda
            
        # CORDA NETWORK
        - name: Start Corda Network
          run: |
            make start
            sleep 60
            docker logs corda_partya_1
            docker logs corda_partyb_1
          working-directory: tests/network-setups/corda
          
        # FABRIC CLI
        - name: Setup Corda CLI init
          run: ./scripts/initAsset.sh
          working-directory: samples/corda/corda-simple-application
          
        - name: Asset Exchange Corda CLI Tests
          run: |
            COUNT=0
            TOTAL=5

            # Lock 50 tokens
            CORDA_PORT=10009 ./clients/build/install/clients/bin/clients lock-asset -f -h64 ivHErp1x4bJDKuRo6L5bApO/DdoyD/dG0mAZrzLZEIs= -t 180 -r "O=PartyA,L=London,C=GB" -p t1:50 &> tmp.out
            tail -n 2 tmp.out | grep "HTLC Lock State created with contract ID Right" && COUNT=$(( COUNT + 1 )) && echo "PASS"
            cat tmp.out
            
            CID=$(tail -n 2 tmp.out | grep "HTLC Lock State created with contract ID Right" | sed -e 's/.*Right(b=\(.*\))\./\1/')
            
            # Is Asset locked
            CORDA_PORT=10009 ./clients/build/install/clients/bin/clients is-asset-locked -cid $CID &> tmp.out
            tail -n 2 tmp.out | grep "Is Asset Locked Response: true" && COUNT=$(( COUNT + 1 )) && echo "PASS"
            cat tmp.out
            
            # Claim asset
            CORDA_PORT=10006 ./clients/build/install/clients/bin/clients claim-asset -cid $CID -s secrettext &> tmp.out
            tail -n 2 tmp.out | grep "Asset Claim Response: Right" && COUNT=$(( COUNT + 1 )) && echo "PASS"
            cat tmp.out
            
            # Timeout
            CORDA_PORT=10006 ./clients/build/install/clients/bin/clients lock-asset -f -h64 ivHErp1x4bJDKuRo6L5bApO/DdoyD/dG0mAZrzLZEIs= -t 5 -r "O=PartyB,L=London,C=GB" -p t1:50 &> tmp.out
            CID=$(tail -n 2 tmp.out | grep "HTLC Lock State created with contract ID Right" | sed -e 's/.*Right(b=\(.*\))\./\1/')
            sleep 5
            cat tmp.out
            
            ## Is asset lock false
            CORDA_PORT=10009 ./clients/build/install/clients/bin/clients is-asset-locked -cid $CID &> tmp.out
            tail -n 2 tmp.out | grep "Is Asset Locked Response: false" && COUNT=$(( COUNT + 1 )) && echo "PASS"
            cat tmp.out
            
            ## Unlock asset
            CORDA_PORT=10006 ./clients/build/install/clients/bin/clients unlock-asset -cid $CID &> tmp.out
            tail -n 2 tmp.out | grep "Asset Unlock Response: Right" && COUNT=$(( COUNT + 1 )) && echo "PASS"
            cat tmp.out

            # RESULT
            echo "Passed $COUNT/$TOTAL Tests."

            if [ $COUNT == $TOTAL ]; then
                exit 0
            else
                exit 1
            fi
          working-directory: samples/corda/corda-simple-application
          
    asset-exchange-corda-local:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest

      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v2
        
        - name: Set up JDK 8
          uses: actions/setup-java@v2
          with:
            java-version: '8'
            distribution: 'adopt'
            
        - name: Use Protoc 3.15
          run: |
            curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.15.6/protoc-3.15.6-linux-x86_64.zip
            unzip protoc-3.15.6-linux-x86_64.zip -d protoc
            go get -u google.golang.org/protobuf/cmd/protoc-gen-go
            go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
            
        - name: Build Java Protos
          run: make build
          working-directory: common/protos-java-kt
          
        # Build Dependencies        
        - name: Build Corda Interop App
          run: make build-local
          working-directory: core/network/corda-interop-app
          
        - name: Build Corda Interop SDK
          run: make build
          working-directory: sdks/corda
          
        - name: Build Corda SimpleApplication
          run: make build-local
          working-directory: samples/corda/corda-simple-application
            
        # CORDA NETWORK
        - name: Start Corda Network
          run: |
            make start-local
            sleep 60
            docker logs corda_partya_1
            docker logs corda_partyb_1
          working-directory: tests/network-setups/corda
          
        # FABRIC CLI
        - name: Setup Corda CLI init
          run: ./scripts/initAsset.sh
          working-directory: samples/corda/corda-simple-application
          
        - name: Asset Exchange Corda CLI Tests
          run: |
            COUNT=0
            TOTAL=5

            # Lock 50 tokens
            CORDA_PORT=10009 ./clients/build/install/clients/bin/clients lock-asset -f -h64 ivHErp1x4bJDKuRo6L5bApO/DdoyD/dG0mAZrzLZEIs= -t 180 -r "O=PartyA,L=London,C=GB" -p t1:50 &> tmp.out
            tail -n 2 tmp.out | grep "HTLC Lock State created with contract ID Right" && COUNT=$(( COUNT + 1 )) && echo "PASS"
            cat tmp.out
            
            CID=$(tail -n 2 tmp.out | grep "HTLC Lock State created with contract ID Right" | sed -e 's/.*Right(b=\(.*\))\./\1/')
            
            # Is Asset locked
            CORDA_PORT=10009 ./clients/build/install/clients/bin/clients is-asset-locked -cid $CID &> tmp.out
            tail -n 2 tmp.out | grep "Is Asset Locked Response: true" && COUNT=$(( COUNT + 1 )) && echo "PASS"
            cat tmp.out
            
            # Claim asset
            CORDA_PORT=10006 ./clients/build/install/clients/bin/clients claim-asset -cid $CID -s secrettext &> tmp.out
            tail -n 2 tmp.out | grep "Asset Claim Response: Right" && COUNT=$(( COUNT + 1 )) && echo "PASS"
            cat tmp.out
            
            # Timeout
            CORDA_PORT=10006 ./clients/build/install/clients/bin/clients lock-asset -f -h64 ivHErp1x4bJDKuRo6L5bApO/DdoyD/dG0mAZrzLZEIs= -t 5 -r "O=PartyB,L=London,C=GB" -p t1:50 &> tmp.out
            CID=$(tail -n 2 tmp.out | grep "HTLC Lock State created with contract ID Right" | sed -e 's/.*Right(b=\(.*\))\./\1/')
            sleep 5
            cat tmp.out
            
            ## Is asset lock false
            CORDA_PORT=10009 ./clients/build/install/clients/bin/clients is-asset-locked -cid $CID &> tmp.out
            tail -n 2 tmp.out | grep "Is Asset Locked Response: false" && COUNT=$(( COUNT + 1 )) && echo "PASS"
            cat tmp.out
            
            ## Unlock asset
            CORDA_PORT=10006 ./clients/build/install/clients/bin/clients unlock-asset -cid $CID &> tmp.out
            tail -n 2 tmp.out | grep "Asset Unlock Response: Right" && COUNT=$(( COUNT + 1 )) && echo "PASS"
            cat tmp.out

            # RESULT
            echo "Passed $COUNT/$TOTAL Tests."

            if [ $COUNT == $TOTAL ]; then
                exit 0
            else
                exit 1
            fi
          working-directory: samples/corda/corda-simple-application

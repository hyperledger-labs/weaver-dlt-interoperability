# This is a basic workflow to help you get started with Actions

name: Test Asset Exchange Besu

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
        
  asset-exchange-besu:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          
      # BESU NETWORK
      - name: Start Besu Network
        run: |
          sudo apt install -y tmux jq
          wget https://hyperledger.jfrog.io/artifactory/besu-binaries/besu/22.7.0/besu-22.7.0.zip 
          unzip besu-22.7.0.zip 
          export PATH="${PWD}/besu-22.7.0/bin:$PATH"
          wget https://artifacts.consensys.net/public/ethsigner/raw/names/ethsigner.zip/versions/22.1.3/ethsigner-22.1.3.zip
          unzip ethsigner-22.1.3.zip
          export PATH="${PWD}/ethsigner-22.1.3/bin:$PATH"
          make start
          sleep 100
        working-directory: tests/network-setups/besu
      
      # Deploy contracts
      - name: Deploy contracts
        run: |
         make deploy-contracts
        working-directory: samples/besu/simpleasset

      - name: Use Protoc 3.15
        run: |
          curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v3.15.6/protoc-3.15.6-linux-x86_64.zip
          unzip protoc-3.15.6-linux-x86_64.zip -d protoc
          go get -u google.golang.org/protobuf/cmd/protoc-gen-go
          go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
          
      # PROTOS
      - name: Build JS Protos
        run: |
          export PATH="$PATH:${GITHUB_WORKSPACE}/protoc/bin"
          make build
        working-directory: common/protos-js

      # BESU SDK
      - name: Setup BESU SDK
        run: |
         npm link
         make build-local
        working-directory: sdks/besu/interoperation-node-sdk 

       # BESU CLI
      - name: Setup BESU CLI init
        run: |
         npm install .
         cp config.template.json tmp.json
         cp config.template.json tmp.json
         jq -r '.network1.tokenContract |= "../simpleasset/build/contracts/AliceERC20.json"' tmp.json > config.json
         cp config.json tmp.json
         jq -r '.network2.tokenContract |= "../simpleasset/build/contracts/BobERC20.json"' tmp.json > config.json
         rm tmp.json
        working-directory: samples/besu/besu-cli  
        
      - name: Asset Exchange Besu CLI Tests
        run: |
          export PATH="${PWD}/bin:$PATH"
          COUNT=0
          TOTAL=15
          tokencontract=( "AliceERC1155" "AliceERC20" "AliceERC721") 
          for (( count=0; count<3; count++ ))
          do 
          cp config.template.json tmp.json
          cp config.template.json tmp.json
          jq  -r ".network1.tokenContract |= \"../simpleasset/build/contracts/${tokencontract[$count]}.json\"" tmp.json > config.json
          cp config.json tmp.json
          jq -r '.network2.tokenContract |= "../simpleasset/build/contracts/BobERC20.json"' tmp.json > config.json
          rm tmp.json

          # issue 1 tokens to account 1
          # & lock 1 token for account 2 in network 2
          if [ ${tokencontract[$count]} == "AliceERC20" ]; then
              besu-cli asset issue --network=network1 --account=1 --amount=1 --asset_type=ERC20
              besu-cli asset lock --network=network1 --sender_account=1 --recipient_account=2 --amount=1 --timeout=1000 1> tmp.out
          elif [ ${tokencontract[$count]} == "AliceERC1155" ]; then
              besu-cli asset issue --network=network1 --account=1 --amount=1 --token_id=0 --token_data="" --asset_type=ERC1155 
              besu-cli asset lock --network=network1 --sender_account=1 --recipient_account=2 --amount=1 --token_id=0 --timeout=1000 --asset_type=ERC1155 1> tmp.out
          else
              besu-cli asset issue --network=network1 --account=1 --amount=1 --token_id=0 --asset_type=ERC721 
              besu-cli asset lock --network=network1 --sender_account=1 --recipient_account=2 --amount=1 --token_id=0 --asset_type=ERC721 --timeout=1000 1> tmp.out
          fi
          
          cat tmp.out | grep "Account balance of the sender in Network network1: 1" && COUNT=$(( COUNT + 1 )) && echo "PASS"
          cat tmp.out

          tmp_string=$(cat tmp.out | grep "Lock contract ID:")
          arrIN=(${tmp_string//:/ })
          LOCK_ID=${arrIN[3]}
          tmp_string=$(cat tmp.out | grep "Preimage:")
          arrIN=(${tmp_string//:/ })
          PREIMAGE=${arrIN[1]}

          # Is Asset locked
          besu-cli asset is-locked --network=network1 --lock_contract_id=$LOCK_ID 1> tmp.out
          cat tmp.out | grep "in Network network1: true" && COUNT=$(( COUNT + 1 )) && echo "PASS"
          cat tmp.out

          sleep 30
          
          # Claim asset
          besu-cli asset claim --network=network1 --lock_contract_id=$LOCK_ID --recipient_account=2 --preimage=$PREIMAGE 1> tmp.out
          cat tmp.out | grep "Account balance of the recipient in Network network1 after claiming: 1" && COUNT=$(( COUNT + 1 )) && echo "PASS"
          cat tmp.out

          # test unlock
          if [ ${tokencontract[$count]} == "AliceERC20" ]; then
              besu-cli asset issue --network=network1 --account=1 --amount=1 --asset_type=ERC20
              besu-cli asset lock --network=network1 --sender_account=1 --recipient_account=2 --amount=1 --timeout=5 1> tmp.out
          elif [ ${tokencontract[$count]} == "AliceERC1155" ]; then
              besu-cli asset issue --network=network1 --account=1 --amount=1 --token_id=1 --token_data="" --asset_type=ERC1155 
              besu-cli asset lock --network=network1 --sender_account=1 --recipient_account=2 --amount=1 --token_id=1 --timeout=5 --asset_type=ERC1155 1> tmp.out
          else
              besu-cli asset issue --network=network1 --account=1 --amount=1 --token_id=1 --asset_type=ERC721 
              besu-cli asset lock --network=network1 --sender_account=1 --recipient_account=2 --amount=1 --token_id=1 --asset_type=ERC721 --timeout=5 1> tmp.out
          fi
          cat tmp.out | grep "Account balance of the sender in Network network1: 0" && COUNT=$(( COUNT + 1 )) && echo "PASS"
          cat tmp.out

          tmp_string=$(cat tmp.out | grep "Lock contract ID:")
          arrIN=(${tmp_string//:/ })
          LOCK_ID=${arrIN[3]}
          tmp_string=$(cat tmp.out | grep "Preimage:")
          arrIN=(${tmp_string//:/ })
          PREIMAGE=${arrIN[1]}

          besu-cli asset unlock --network=network1 --lock_contract_id=$LOCK_ID --sender_account=1 --token_id=1 1> tmp.out
          cat tmp.out | grep "after unlocking: 1" && COUNT=$(( COUNT + 1 )) && echo "PASS"
          cat tmp.out
          done
          # RESULT
          echo "Passed $COUNT/$TOTAL Tests."

          if [ $COUNT == $TOTAL ]; then
              exit 0
          else
              exit 1
          fi
        working-directory: samples/besu/besu-cli

